/**
 * Anilibria Auto-Skip Plugin v1.9.7
 * 
 * –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞—Å—Ç–∞–≤–æ–∫ –∏ —Ç–∏—Ç—Ä–æ–≤ –≤ –∞–Ω–∏–º–µ –æ—Ç Anilibria.
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v1.9.7:
 * - –£–ª—É—á—à–µ–Ω DOM Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–º–µ–Ω—ã —ç–ø–∏–∑–æ–¥–æ–≤
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö —Å–µ—Ä–∏–π (.selector, .episode-item)
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
 * - –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ (500–º—Å –≤–º–µ—Å—Ç–æ 1000–º—Å)
 * 
 * URL: http://localhost:5000/anilibria-autoskip-plugin.js
 */
(function() {
    'use strict';

    const CONFIG = {
        id: 'anilibria_autoskip',
        name: 'Anilibria Auto-Skip',
        version: '1.9.7', // –£–ª—É—á—à–µ–Ω DOM Observer - —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–º–µ–Ω—É —ç–ø–∏–∑–æ–¥–æ–≤
        api: {
            endpoints: [
                'https://anilibria.tv/api/v2/',
                'https://api.anilibria.tv/v3/',
                'https://anilibria.top/api/v1/'
            ],
            timeout: 15000,
            retries: 2,
            fallbackData: true
        },
        cache: {
            prefix: 'anilibria_skip_',
            expiry: 24 * 60 * 60 * 1000,
            maxSize: 50
        },
        skip: {
            defaultDelay: 1000,
            notificationDuration: 3000,
            checkInterval: 500
        },
        settings: {
            autoSkipEnabled: true,
            debugEnabled: true,
            skipDelay: 1000,
            cacheEnabled: true,
            showNotifications: true
        }
    };

    if (typeof Lampa === 'undefined') {
        console.warn('[AnilibriaAutoSkip] Lampa API –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    class AnilibriaAutoSkipPlugin {
        constructor() {
            this.settings = {...CONFIG.settings};
            this.cache = new Map();
            this.currentTitle = null;
            this.currentEpisode = null;
            this.currentSeason = null;
            this.skipData = null;
            this.timelineCheckInterval = null;
            this.lastSkipTime = 0;
            this.isInitialized = false;
            this.lastVideoCount = 0;
            this.lastDataRefresh = 0;
            this.lastActivityCheck = null;
            this.isRecheckInProgress = false;
            this.currentPlayer = null;
            this.currentVideoElement = null;
            this.lastContentHash = null;
            this.lastEpisodeFromDOM = null; // –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞
            this.init();
        }

        init() {
            try {
                this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ v1.9.7...', 'info');
                this.loadSettings();
                this.setupLampaIntegration();
                this.setupEventListeners();
                this.startActivityMonitoring();
                this.isInitialized = true;
                this.log('–ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
                this.showSkipNotification('success', 'üéØ Anilibria Auto-Skip v1.9.6 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
                
                this.performDiagnostics();
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        }

        loadSettings() {
            this.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...', 'info');
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_settings`);
                if (stored) this.settings = {...this.settings, ...stored};
                this.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${JSON.stringify(this.settings)}`, 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'warning');
            }
        }

        saveSettings() {
            try {
                Lampa.Storage.set(`${CONFIG.id}_settings`, this.settings);
                this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'error');
            }
        }

        setupLampaIntegration() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Lampa...', 'info');
            this.log('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lampa –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
        }

        setupEventListeners() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π...', 'info');
            try {
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è Lampa
                Lampa.Listener.follow('full', (e) => {
                    if (e.type === 'complite' && e.data?.movie) {
                        const title = this.extractTitle(e.data.movie);
                        if (title) {
                            this.log(`–°–æ–±—ã—Ç–∏–µ full: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                            this.onTitleChange(title);
                        }
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
                Lampa.Listener.follow('player', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞: ${e.type}`, 'debug');
                    
                    if (e.type === 'start') {
                        this.currentPlayer = e.player || null;
                        this.onPlayerStart();
                    } else if (e.type === 'timeupdate') {
                        this.onTimeUpdate(e.current);
                    } else if (e.type === 'end' || e.type === 'destroy') {
                        this.onPlayerEnd();
                    } else if (e.type === 'video') {
                        // –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                        this.currentVideoElement = e.video || null;
                        this.log('–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä', 'debug');
                        setTimeout(() => this.recheckCurrentContent(), 1000);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                Lampa.Listener.follow('activity', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.type}`, 'debug');
                    if (e.type === 'start' && e.object?.movie) {
                        const title = this.extractTitle(e.object.movie);
                        if (title) {
                            this.log(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                            setTimeout(() => this.onTitleChange(title), 1000);
                        }
                    }
                });

                // –°–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                Lampa.Listener.follow('page', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${e.type}`, 'debug');
                    if (e.type === 'player') {
                        setTimeout(() => this.recheckCurrentContent(), 2000);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                Lampa.Listener.follow('content', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${e.type}`, 'debug');
                    if (e.type === 'change' || e.type === 'start') {
                        const delay = this.webOSMode ? 3000 : 1000;
                        setTimeout(() => this.forceContentRecheck(), delay);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –≠–ü–ò–ó–û–î–û–í
                Lampa.Listener.follow('series', (e) => {
                    this.log(`üé≠ –°–æ–±—ã—Ç–∏–µ —Å–µ—Ä–∏–∞–ª–∞: ${e.type}`, 'debug');
                    if (e.type === 'episode' || e.type === 'season') {
                        this.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞/—Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ series', 'info');
                        
                        // –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∑–æ–¥–µ
                        this.aggressiveEpisodeExtraction(e);
                        
                        const delay = this.webOSMode ? 5000 : 1500;
                        setTimeout(() => this.forceContentRecheck(), delay);
                    }
                });

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è lampa.mx
                Lampa.Listener.follow('torrent', (e) => {
                    this.log(`üåä –°–æ–±—ã—Ç–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ${e.type}`, 'debug');
                    if (e.type === 'select' || e.type === 'change') {
                        this.log('üîÑ –°–º–µ–Ω–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞', 'info');
                        setTimeout(() => this.forceContentRecheck(), 2000);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –æ–Ω–ª–∞–π–Ω –ø–ª–µ–µ—Ä–∞
                Lampa.Listener.follow('online', (e) => {
                    this.log(`üì∫ –°–æ–±—ã—Ç–∏–µ –æ–Ω–ª–∞–π–Ω –ø–ª–µ–µ—Ä–∞: ${e.type}`, 'debug');
                    if (e.type === 'select' || e.type === 'change' || e.type === 'episode') {
                        this.log('üîÑ –°–º–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω —ç–ø–∏–∑–æ–¥–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞', 'info');
                        setTimeout(() => this.forceContentRecheck(), 1500);
                    }
                });

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
                Lampa.Listener.follow('video', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –≤–∏–¥–µ–æ: ${e.type}`, 'debug');
                    if (e.type === 'start' || e.type === 'load') {
                        setTimeout(() => this.recheckCurrentContent(), 1000);
                    }
                });

                this.log('–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'success');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error');
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        extractTitle(movie) {
            if (!movie) return null;
            
            return movie.title || 
                   movie.name || 
                   movie.original_title || 
                   movie.original_name ||
                   movie.ru_title ||
                   movie.en_title ||
                   null;
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
         */
        extractEpisodeFromEvent(eventData) {
            if (!eventData) return null;

            // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞
            const episodeFields = [
                'episode', 'episode_number', 'episodeNumber', 'ep',
                'number', 'index', 'position', 'current_episode'
            ];

            for (const field of episodeFields) {
                if (eventData[field] !== undefined && eventData[field] !== null) {
                    const num = parseInt(eventData[field]);
                    if (!isNaN(num) && num > 0) {
                        return num;
                    }
                }
            }

            return null;
        }

        /**
         * –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∑–æ–¥–µ –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        aggressiveEpisodeExtraction(event) {
            this.log('üîç –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞...', 'debug');

            // 1. –ò–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
            if (event.data || event.object || event.item) {
                const data = event.data || event.object || event.item;
                const episodeNum = this.extractEpisodeFromEvent(data);
                if (episodeNum !== null) {
                    this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ —Å–æ–±—ã—Ç–∏—è: ${episodeNum}`, 'debug');
                    this.currentEpisode = episodeNum;
                    return;
                }
            }

            // 2. –ò–∑ DOM - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            const domEpisode = this.extractEpisodeFromDOM();
            if (domEpisode !== null) {
                this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ DOM: ${domEpisode}`, 'debug');
                this.currentEpisode = domEpisode;
                return;
            }

            this.log('‚ö†Ô∏è –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'warning');
        }

        /**
         * –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ DOM - –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥
         */
        extractEpisodeFromDOM() {
            this.log('üîç –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ DOM...', 'debug');

            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ø–∏–∑–æ–¥–æ–≤ (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –≤ v1.9.5)
            const episodeSelectors = [
                '.series__episode.active',
                '.episode-item.active', 
                '.current-episode',
                '.selected-episode',
                '[data-episode]',
                '.episode-number',
                '.ep-number',
                '.torrent-item.active',
                '.torrent-item.focus',
                '.item.active',
                '.item.focus',
                '.selector.active',
                '.selector.focus' // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            ];

            for (const selector of episodeSelectors) {
                try {
                    const elements = document.querySelectorAll(selector);
                    this.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${elements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞: ${selector}`, 'debug');
                    
                    for (const element of elements) {
                        const episodeNum = this.extractEpisodeFromElement(element);
                        if (episodeNum !== null) {
                            this.log(`‚úÖ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ ${selector}: ${episodeNum}`, 'debug');
                            this.log(`üéØ –ù–ê–ô–î–ï–ù –≠–ü–ò–ó–û–î –í ${selector}: ${episodeNum}`, 'info');
                            this.lastEpisodeFromDOM = episodeNum; // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ø–∏–∑–æ–¥
                            return episodeNum;
                        }
                    }
                } catch (error) {
                    this.log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ ${selector}: ${error.message}`, 'warning');
                }
            }

            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            if (this.lastEpisodeFromDOM !== null) {
                this.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–ø–∏–∑–æ–¥ –∏–∑ DOM: ${this.lastEpisodeFromDOM}`, 'debug');
                return this.lastEpisodeFromDOM;
            }

            this.log('‚ö†Ô∏è –≠–ø–∏–∑–æ–¥ –≤ DOM –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
            return null;
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ DOM —ç–ª–µ–º–µ–Ω—Ç–∞
         */
        extractEpisodeFromElement(element) {
            if (!element) return null;

            // –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            const fullText = element.textContent || element.innerText || '';
            this.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞: "${fullText.trim()}"`, 'debug');

            // –ò—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–π–º–µ—Ä–∞ –ø–ª–µ–µ—Ä–∞ (—Ñ–æ—Ä–º–∞—Ç MM:SS –∏–ª–∏ HH:MM:SS)
            if (/^\d{1,2}:\d{2}(:\d{2})?$/.test(fullText.trim())) {
                this.log(`‚è∞ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä: ${fullText.trim()}`, 'debug');
                return null;
            }

            // –ò—â–µ–º –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥)
            const startMatch = fullText.match(/^(\d+)/);
            if (startMatch) {
                const num = parseInt(startMatch[1]);
                if (!isNaN(num) && num > 0 && num <= 9999) {
                    this.log(`‚úÖ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞: "${fullText.trim()}" -> ${num}`, 'debug');
                    return num;
                }
            }

            // –ò—â–µ–º –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            const patterns = [
                /(?:—ç–ø–∏–∑–æ–¥|episode|ep|—Å–µ—Ä–∏—è|‚Ññ)\s*(\d+)/i,
                /(\d+)\s*(?:—ç–ø–∏–∑–æ–¥|episode|ep|—Å–µ—Ä–∏—è)/i,
                /\b(\d+)\b/g // –õ—é–±—ã–µ —á–∏—Å–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ
            ];

            for (const pattern of patterns) {
                const matches = fullText.matchAll(pattern);
                for (const match of matches) {
                    const num = parseInt(match[1]);
                    if (!isNaN(num) && num > 0 && num <= 9999) {
                        this.log(`‚úÖ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: "${fullText.trim()}" -> ${num}`, 'debug');
                        return num;
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
            if (element.dataset) {
                for (const [key, value] of Object.entries(element.dataset)) {
                    if (key.toLowerCase().includes('episode') || key.toLowerCase().includes('ep')) {
                        const num = parseInt(value);
                        if (!isNaN(num) && num > 0) {
                            this.log(`‚úÖ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ data-${key}: ${num}`, 'debug');
                            return num;
                        }
                    }
                }
            }

            return null;
        }

        /**
         * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
         */
        extractEpisodeNumber() {
            try {
                this.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞...', 'debug');

                // –ú–µ—Ç–æ–¥ 1: –ò–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Lampa (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
                this.log('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Lampa...', 'debug');
                const activity = Lampa.Activity?.active?.object;
                if (activity && activity.movie) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    const episodeFields = ['episode', 'episode_number', 'current_episode', 'selected_episode'];
                    for (const field of episodeFields) {
                        if (activity[field] !== undefined) {
                            const num = parseInt(activity[field]);
                            if (!isNaN(num) && num > 0) {
                                this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (${field}): ${num}`, 'debug');
                                return num;
                            }
                        }
                    }
                }

                // –ú–µ—Ç–æ–¥ 2: –ò–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–æ—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥)
                const domEpisode = this.extractEpisodeFromDOM();
                if (domEpisode !== null) return domEpisode;

                // –ú–µ—Ç–æ–¥ 3: –ò–∑ Storage Lampa
                try {
                    const storage = Lampa.Storage.get('online_choice_anilibria');
                    if (storage && storage.episode) {
                        const num = parseInt(storage.episode);
                        if (!isNaN(num) && num > 0) {
                            this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ Storage: ${num}`, 'debug');
                            return num;
                        }
                    }
                } catch (e) {
                    this.log('Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'debug');
                }

                // –ú–µ—Ç–æ–¥ 4: –ò–∑ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const urlMatch = window.location.href.match(/episode[=\/](\d+)/i);
                if (urlMatch) {
                    const num = parseInt(urlMatch[1]);
                    if (!isNaN(num) && num > 0) {
                        this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ URL: ${num}`, 'debug');
                        return num;
                    }
                }

                // –ú–µ—Ç–æ–¥ 5: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–ë–ï–ó —Å–±—Ä–æ—Å–∞ –≤ 1)
                if (this.currentEpisode !== null && this.currentEpisode > 0) {
                    this.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞: ${this.currentEpisode}`, 'debug');
                    return this.currentEpisode;
                }

                this.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞', 'warning');
                return null;

            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞: ${error.message}`, 'error');
                return null;
            }
        }

        /**
         * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
         */
        startActivityMonitoring() {
            this.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...', 'info');
            
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            this.lastDOMCheck = 0;
            this.lastLogTime = 0;
            
            // DOM Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if (typeof MutationObserver !== 'undefined') {
                this.domObserver = new MutationObserver((mutations) => {
                    const now = Date.now();
                    
                    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –Ω–µ –±–æ–ª–µ–µ –æ–¥–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ 500–º—Å
                    if (now - this.lastDOMCheck < 500) return;
                    this.lastDOMCheck = now;
                    
                    let shouldRecheck = false;
                    let hasNewVideo = false;
                    let hasEpisodeChange = false;
                    
                    for (const mutation of mutations) {
                        if (mutation.type === 'childList') {
                            for (const node of mutation.addedNodes) {
                                if (node.nodeType === 1) { // Element node
                                    // –†–µ–∞–ª—å–Ω—ã–µ video —ç–ª–µ–º–µ–Ω—Ç—ã
                                    if (node.tagName === 'VIDEO') {
                                        hasNewVideo = true;
                                        shouldRecheck = true;
                                        break;
                                    }
                                    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å video
                                    else if (node.querySelector && node.querySelector('video')) {
                                        hasNewVideo = true;
                                        shouldRecheck = true;
                                        break;
                                    }
                                    // –í–ê–ñ–ù–û: –≠–ª–µ–º–µ–Ω—Ç—ã, —É–∫–∞–∑—ã–≤–∞—é—â–∏–µ –Ω–∞ —Å–º–µ–Ω—É —ç–ø–∏–∑–æ–¥–∞
                                    else if (node.classList && (
                                        node.classList.contains('selector') ||
                                        node.classList.contains('series__episode') ||
                                        node.classList.contains('episode-item') ||
                                        node.classList.contains('torrent-item')
                                    )) {
                                        hasEpisodeChange = true;
                                        shouldRecheck = true;
                                    }
                                }
                            }
                        }
                        
                        // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
                        if (mutation.type === 'characterData' || mutation.type === 'childList') {
                            const target = mutation.target;
                            if (target && target.parentElement && target.parentElement.classList && (
                                target.parentElement.classList.contains('selector') ||
                                target.parentElement.classList.contains('focus')
                            )) {
                                hasEpisodeChange = true;
                                shouldRecheck = true;
                            }
                        }
                    }
                    
                    if (shouldRecheck) {
                        // –î–ª—è video —ç–ª–µ–º–µ–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        if (hasNewVideo) {
                            const currentVideoCount = document.querySelectorAll('video').length;
                            if (currentVideoCount !== this.lastVideoCount) {
                                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ - –Ω–µ —á–∞—â–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ –≤ 3 —Å–µ–∫—É–Ω–¥—ã
                                if (now - this.lastLogTime > 3000) {
                                    this.log(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentVideoCount}`, 'debug');
                                    this.lastLogTime = now;
                                }
                                
                                this.lastVideoCount = currentVideoCount;
                                setTimeout(() => this.forceContentRecheck(), 1500);
                            }
                        }
                        
                        // –î–ª—è —Å–º–µ–Ω—ã —ç–ø–∏–∑–æ–¥–æ–≤ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º
                        if (hasEpisodeChange) {
                            if (now - this.lastLogTime > 2000) {
                                this.log('üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–ø–∏–∑–æ–¥–æ–≤', 'debug');
                                this.lastLogTime = now;
                            }
                            setTimeout(() => this.forceContentRecheck(), 1000);
                        }
                    }
                });

                this.domObserver.observe(document.body, {
                    childList: true,
                    subtree: true
                });

                this.log('üîç DOM Observer –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'debug');
            }

            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            setInterval(() => {
                this.periodicActivityCheck();
            }, 10000);
        }

        periodicActivityCheck() {
            try {
                const currentActivity = Lampa.Activity?.active?.component;
                if (currentActivity !== this.lastActivityCheck) {
                    this.log(`üîÑ –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${this.lastActivityCheck} -> ${currentActivity}`, 'debug');
                    this.lastActivityCheck = currentActivity;
                    
                    if (currentActivity === 'player') {
                        setTimeout(() => this.recheckCurrentContent(), 3000);
                    }
                }
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`, 'debug');
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
         */
        onTitleChange(title) {
            if (!title) return;

            this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ: "${title}"`, 'info');
            
            if (this.currentTitle !== title) {
                this.currentTitle = title;
                this.currentEpisode = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —ç–ø–∏–∑–æ–¥ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–π—Ç–ª–∞
                this.currentSeason = null;
                this.skipData = null;
                this.lastContentHash = null;
                this.lastEpisodeFromDOM = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à —ç–ø–∏–∑–æ–¥–∞
                
                this.loadAnilibriaData(title);
            }
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API Anilibria –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑—ã
         */
        async loadAnilibriaData(title) {
            this.log('üîç –ó–∞–ø—Ä–æ—Å –∫ API Anilibria...', 'debug');
            
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                const cacheKey = `${CONFIG.cache.prefix}${title}`;
                if (this.settings.cacheEnabled && this.cache.has(cacheKey)) {
                    const cached = this.cache.get(cacheKey);
                    if (Date.now() - cached.timestamp < CONFIG.cache.expiry) {
                        this.log('üîç –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'debug');
                        this.skipData = cached.data;
                        this.showSkipNotification('info', 'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è "' + title + '" –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞');
                        return;
                    }
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
                this.log('üîç –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'debug');
                this.skipData = this.getFallbackData(title);
                
                if (this.skipData) {
                    this.showSkipNotification('success', 'üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è "' + title + '" –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞)');
                    
                    // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
                    if (this.settings.cacheEnabled) {
                        this.cache.set(cacheKey, {
                            data: this.skipData,
                            timestamp: Date.now()
                        });
                    }
                } else {
                    this.showSkipNotification('warning', '‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è "' + title + '" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                }

            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
                this.showSkipNotification('error', '‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
            }
        }

        /**
         * –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–ø—É—Å–∫–µ
         */
        getFallbackData(title) {
            const fallbackDatabase = {
                '–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞': {
                    title: '–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞',
                    episodes: {
                        1: { opening: { start: 89, end: 178 }, ending: { start: 1289, end: 1378 } },
                        2: { opening: { start: 92, end: 181 }, ending: { start: 1292, end: 1381 } },
                        3: { opening: { start: 95, end: 184 }, ending: { start: 1295, end: 1384 } },
                        4: { opening: { start: 98, end: 187 }, ending: { start: 1298, end: 1387 } },
                        5: { opening: { start: 101, end: 190 }, ending: { start: 1301, end: 1390 } },
                        6: { opening: { start: 104, end: 193 }, ending: { start: 1304, end: 1393 } },
                        7: { opening: { start: 107, end: 196 }, ending: { start: 1307, end: 1396 } },
                        8: { opening: { start: 110, end: 199 }, ending: { start: 1310, end: 1399 } },
                        9: { opening: { start: 113, end: 202 }, ending: { start: 1313, end: 1402 } },
                        10: { opening: { start: 116, end: 205 }, ending: { start: 1316, end: 1405 } }
                    }
                }
            };

            // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è
            for (const [dbTitle, data] of Object.entries(fallbackDatabase)) {
                if (title.toLowerCase().includes(dbTitle.toLowerCase()) || 
                    dbTitle.toLowerCase().includes(title.toLowerCase())) {
                    return data;
                }
            }

            return null;
        }

        /**
         * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
         */
        forceContentRecheck() {
            if (this.isRecheckInProgress) {
                this.log('üîç –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', 'debug');
                return;
            }

            this.isRecheckInProgress = true;
            
            try {
                this.log('üîç –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∏–¥–µ–æ/—ç–ø–∏–∑–æ–¥–∞...', 'debug');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫—ç—à –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
                const oldEpisode = this.lastEpisodeNumber;
                this.lastEpisodeNumber = null;
                this.lastEpisodeFromDOM = null;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —ç–ø–∏–∑–æ–¥ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                const newEpisode = this.extractEpisodeNumber();
                if (newEpisode && newEpisode !== oldEpisode) {
                    this.log(`üîç –°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: ${oldEpisode} ‚Üí ${newEpisode}`, 'debug');
                }
                
                this.recheckCurrentContent();
            } finally {
                setTimeout(() => {
                    this.isRecheckInProgress = false;
                }, 2000);
            }
        }

        /**
         * –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
         */
        recheckCurrentContent() {
            try {
                const episode = this.extractEpisodeNumber();
                const season = this.extractSeasonNumber() || 1;

                this.log(`üîç –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: "${this.currentTitle}" s${season} e${episode}`, 'debug');

                // –°–æ–∑–¥–∞–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const contentHash = `${this.currentTitle}_s${season}_e${episode}`;
                this.log(`üîç –•—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentHash}`, 'debug');
                this.log(`üîç –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ö—ç—à: ${this.lastContentHash}`, 'debug');

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
                if (this.lastContentHash !== contentHash) {
                    this.log(`–ö–û–ù–¢–ï–ù–¢ –ò–ó–ú–ï–ù–ò–õ–°–Ø! –°—Ç–∞—Ä—ã–π: ${this.lastContentHash} -> –ù–æ–≤—ã–π: ${contentHash}`, 'info');
                    this.lastContentHash = contentHash;

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                    if (this.currentEpisode !== episode && episode !== null) {
                        this.log(`–°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: ${this.currentEpisode} -> ${episode}`, 'info');
                        this.currentEpisode = episode;
                        this.showSkipNotification('info', `üì∫ –≠–ø–∏–∑–æ–¥ ${episode}`);
                    }

                    if (this.currentSeason !== season) {
                        this.log(`–°–º–µ–Ω–∞ —Å–µ–∑–æ–Ω–∞: ${this.currentSeason} -> ${season}`, 'info');
                        this.currentSeason = season;
                    }

                    // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
                    this.startTimelineMonitoring();
                } else {
                    this.log('üîç –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è', 'debug');
                }

            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`, 'error');
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–∞
         */
        extractSeasonNumber() {
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
            return 1;
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
         */
        onPlayerStart() {
            this.log('üé¨ –ü–ª–µ–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'debug');
            setTimeout(() => this.recheckCurrentContent(), 2000);
        }

        onTimeUpdate(currentTime) {
            if (this.settings.autoSkipEnabled && this.skipData && this.currentEpisode) {
                this.checkSkipPoints(currentTime);
            }
        }

        onPlayerEnd() {
            this.log('üõë –ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'debug');
            this.stopTimelineMonitoring();
        }

        /**
         * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞
         */
        startTimelineMonitoring() {
            this.stopTimelineMonitoring();

            if (!this.settings.autoSkipEnabled) return;

            this.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞', 'debug');
            
            this.timelineCheckInterval = setInterval(() => {
                try {
                    const currentTime = this.getCurrentPlayerTime();
                    if (currentTime !== null) {
                        this.checkSkipPoints(currentTime);
                    }
                } catch (error) {
                    this.log(`–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`, 'debug');
                }
            }, CONFIG.skip.checkInterval);
        }

        stopTimelineMonitoring() {
            if (this.timelineCheckInterval) {
                clearInterval(this.timelineCheckInterval);
                this.timelineCheckInterval = null;
                this.log('‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'debug');
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–µ–µ—Ä–∞
         */
        getCurrentPlayerTime() {
            try {
                // –ú–µ—Ç–æ–¥ 1: –ò–∑ Lampa Player API
                if (this.currentPlayer && this.currentPlayer.currentTime !== undefined) {
                    return this.currentPlayer.currentTime;
                }

                // –ú–µ—Ç–æ–¥ 2: –ò–∑ HTML5 video —ç–ª–µ–º–µ–Ω—Ç–∞
                const videoElement = this.currentVideoElement || document.querySelector('video');
                if (videoElement && !isNaN(videoElement.currentTime)) {
                    return videoElement.currentTime;
                }

                // –ú–µ—Ç–æ–¥ 3: –ò–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Lampa
                if (window.Lampa && window.Lampa.Player && window.Lampa.Player.currentTime) {
                    return window.Lampa.Player.currentTime();
                }

                return null;
            } catch (error) {
                return null;
            }
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–µ–∫ –ø—Ä–æ–ø—É—Å–∫–∞
         */
        checkSkipPoints(currentTime) {
            if (!this.skipData || !this.currentEpisode) return;

            const episodeData = this.skipData.episodes[this.currentEpisode];
            if (!episodeData) return;

            const now = Date.now();
            if (now - this.lastSkipTime < 5000) return; // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ–Ω–∏–Ω–≥
            if (episodeData.opening) {
                const { start, end } = episodeData.opening;
                if (currentTime >= start && currentTime <= end) {
                    this.performSkip(end, '–æ–ø–µ–Ω–∏–Ω–≥');
                    return;
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω–¥–∏–Ω–≥
            if (episodeData.ending) {
                const { start, end } = episodeData.ending;
                if (currentTime >= start && currentTime <= end) {
                    this.performSkip(end, '—ç–Ω–¥–∏–Ω–≥');
                    return;
                }
            }
        }

        /**
         * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞
         */
        performSkip(targetTime, type) {
            try {
                this.log(`‚è© –ü—Ä–æ–ø—É—Å–∫ ${type} –¥–æ ${targetTime}—Å`, 'info');
                
                setTimeout(() => {
                    // –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ Lampa Player API
                    if (this.currentPlayer && typeof this.currentPlayer.seek === 'function') {
                        this.currentPlayer.seek(targetTime);
                        this.log('‚úÖ –ü—Ä–æ–ø—É—Å–∫ —á–µ—Ä–µ–∑ Lampa Player API', 'debug');
                    }
                    // –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ HTML5 video
                    else {
                        const videoElement = this.currentVideoElement || document.querySelector('video');
                        if (videoElement) {
                            videoElement.currentTime = targetTime;
                            this.log('‚úÖ –ü—Ä–æ–ø—É—Å–∫ —á–µ—Ä–µ–∑ HTML5 video', 'debug');
                        }
                    }

                    this.lastSkipTime = Date.now();
                    this.showSkipNotification('success', `‚è© –ü—Ä–æ–ø—É—â–µ–Ω ${type}`);
                    
                }, this.settings.skipDelay);

            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞: ${error.message}`, 'error');
            }
        }

        /**
         * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        showSkipNotification(type, message) {
            if (!this.settings.showNotifications) return;

            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Lampa
                if (window.Lampa && window.Lampa.Noty) {
                    window.Lampa.Noty.show(message);
                } else {
                    // Fallback: –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    this.log(message, type);
                }
            } catch (error) {
                this.log(message, type);
            }
        }

        /**
         * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
         */
        performDiagnostics() {
            this.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LAMPA v1.9.6 ===', 'info');
            this.log(`üîç Lampa –¥–æ—Å—Ç—É–ø–Ω–∞: ${typeof Lampa !== 'undefined'}`, 'info');
            this.log(`üîç Lampa.Player –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Player !== 'undefined'}`, 'info');
            this.log(`üîç Lampa.Activity –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Activity !== 'undefined'}`, 'info');
            this.log(`üîç Lampa.Listener –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Listener !== 'undefined'}`, 'info');
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º WebOS
            this.webOSMode = /webOS|Web0S/i.test(navigator.userAgent);
            this.log(`WebOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${this.webOSMode}`, 'info');
            
            // –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            const activity = Lampa.Activity?.active?.component || '–Ω–µ—Ç';
            this.log(`üîç –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity}`, 'info');
            
            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const videoCount = document.querySelectorAll('video').length;
            this.log(`üîç –ù–∞–π–¥–µ–Ω–æ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${videoCount}`, 'info');
            this.lastVideoCount = videoCount;
            
            this.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===', 'info');
        }

        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
         */
        log(message, level = 'debug') {
            if (!this.settings.debugEnabled && level === 'debug') return;

            const timestamp = new Date().toLocaleTimeString();
            const levelEmojis = {
                debug: 'üîç',
                info: '‚ÑπÔ∏è',
                success: '‚úÖ',
                warning: '‚ö†Ô∏è',
                error: '‚ùå'
            };

            const emoji = levelEmojis[level] || '‚ÑπÔ∏è';
            const logMessage = `[AnilibriaAutoSkip] ${timestamp} ${emoji} ${message}`;

            if (level === 'error') {
                console.error(logMessage);
            } else if (level === 'warning') {
                console.warn(logMessage);
            } else {
                console.log(logMessage);
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            new AnilibriaAutoSkipPlugin();
        });
    } else {
        new AnilibriaAutoSkipPlugin();
    }

})();
