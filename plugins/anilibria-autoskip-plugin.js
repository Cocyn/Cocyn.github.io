/**
 * Anilibria Auto-Skip Plugin v1.8.0
 * 
 * –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞—Å—Ç–∞–≤–æ–∫ –∏ —Ç–∏—Ç—Ä–æ–≤ –≤ –∞–Ω–∏–º–µ –æ—Ç Anilibria.
 * 
 * –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢:
 * 1. –ü–ª–∞–≥–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ Lampa –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–µ –∞–Ω–∏–º–µ
 * 2. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
 * 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç - –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API Anilibria
 * 4. –ü—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞—Å—Ç–∞–≤–∫–∏/—Ç–∏—Ç—Ä—ã
 * 
 * –í–°–¢–†–û–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ:
 * - "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞", "–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤", "–ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤" –∏ –¥—Ä.
 * 
 * –ò–ù–î–ò–ö–ê–¶–ò–Ø –†–ê–ë–û–¢–´:
 * - –ü—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
 * - –ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –∞–Ω–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è "–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
 * - –ü—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è "–ø—Ä–æ–ø—É—Å–∫ –∑–∞—Å—Ç–∞–≤–∫–∏/—Ç–∏—Ç—Ä–æ–≤"
 * 
 * URL: http://localhost:5000/anilibria-autoskip-plugin.js
 */
(function() {
    'use strict';

    const CONFIG = {
        id: 'anilibria_autoskip',
        name: 'Anilibria Auto-Skip',
        version: '1.6.0', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å API, –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        api: {
            // –û—Å–Ω–æ–≤–Ω–æ–π API –∑–∞—â–∏—â–µ–Ω CloudFlare, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            endpoints: [
                'https://anilibria.tv/api/v2/',
                'https://api.anilibria.tv/v3/',
                'https://anilibria.top/api/v1/'
            ],
            timeout: 15000,
            retries: 2,
            fallbackData: true // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
        },
        cache: {
            prefix: 'anilibria_skip_',
            expiry: 24 * 60 * 60 * 1000,
            maxSize: 50
        },
        skip: {
            defaultDelay: 1000,
            notificationDuration: 3000,
            checkInterval: 500
        },
        settings: {
            autoSkipEnabled: true,
            debugEnabled: true,
            skipDelay: 1000,
            cacheEnabled: true,
            showNotifications: true
        }
    };

    if (typeof Lampa === 'undefined') {
        console.warn('[AnilibriaAutoSkip] Lampa API –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    class AnilibriaAutoSkipPlugin {
        constructor() {
            this.settings = {...CONFIG.settings};
            this.cache = new Map();
            this.currentTitle = null;
            this.currentEpisode = null;
            this.skipData = null;
            this.timelineCheckInterval = null;
            this.lastSkipTime = 0;
            this.isInitialized = false;
            this.lastVideoCount = 0;
            this.lastDataRefresh = 0;
            this.lastActivityCheck = null;
            this.init();
        }

        init() {
            try {
                this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞...', 'info');
                this.loadSettings();
                this.setupLampaIntegration();
                this.setupEventListeners();
                this.startActivityMonitoring();
                this.isInitialized = true;
                this.log('–ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
                this.showSkipNotification('success', 'üéØ Anilibria Auto-Skip –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
                
                // –ü—Ä–æ–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API Lampa
                this.performDiagnostics();
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        }

        loadSettings() {
            this.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...', 'info');
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_settings`);
                if (stored) this.settings = {...this.settings, ...stored};
                this.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${JSON.stringify(this.settings)}`, 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'warning');
            }
        }

        saveSettings() {
            try {
                Lampa.Storage.set(`${CONFIG.id}_settings`, this.settings);
                this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'error');
            }
        }

        setupLampaIntegration() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Lampa...', 'info');
            this.log('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lampa –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
        }

        setupEventListeners() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π...', 'info');
            try {
                Lampa.Listener.follow('full', (e) => {
                    if (e.type === 'complite' && e.data?.movie) {
                        const title = e.data.movie.title || e.data.movie.name || e.data.movie.original_title || e.data.movie.original_name;
                        if (title) this.onTitleChange(title);
                    }
                });

                Lampa.Listener.follow('player', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞: ${e.type}`, 'debug');
                    if (e.type === 'start') this.onPlayerStart();
                    else if (e.type === 'timeupdate') this.onTimeUpdate(e.current);
                    else if (e.type === 'end' || e.type === 'destroy') this.onPlayerEnd();
                });

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                Lampa.Listener.follow('activity', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.type}`, 'debug');
                    if (e.type === 'start' && e.object?.movie) {
                        const title = e.object.movie.title || e.object.movie.name;
                        if (title) {
                            setTimeout(() => this.onTitleChange(title), 1000);
                        }
                    }
                });

                // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                Lampa.Listener.follow('page', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${e.type}`, 'debug');
                    if (e.type === 'player') {
                        setTimeout(() => this.recheckCurrentContent(), 2000);
                    }
                });

                this.log('–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'success');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error');
            }
        }

        performDiagnostics() {
            this.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LAMPA ===', 'info');
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω—ã—Ö API Lampa
                this.log(`Lampa –¥–æ—Å—Ç—É–ø–Ω–∞: ${typeof Lampa !== 'undefined'}`, 'debug');
                this.log(`Lampa.Player –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Player !== 'undefined'}`, 'debug');
                this.log(`Lampa.Activity –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Activity !== 'undefined'}`, 'debug');
                this.log(`Lampa.Listener –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Listener !== 'undefined'}`, 'debug');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    this.log(`–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`, 'debug');
                    if (activity?.movie) {
                        this.log(`–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: ${activity.movie.title || activity.movie.name || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`, 'debug');
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä—ã
                const videos = document.querySelectorAll('video');
                this.log(`–ù–∞–π–¥–µ–Ω–æ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${videos.length}`, 'debug');
                videos.forEach((video, index) => {
                    this.log(`Video ${index}: duration=${video.duration}, currentTime=${video.currentTime}`, 'debug');
                });
                
                this.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===', 'info');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'error');
            }
        }

        startActivityMonitoring() {
            this.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...', 'info');
            setInterval(() => this.checkCurrentActivity(), 2000);
        }

        checkCurrentActivity() {
            try {
                const activity = Lampa.Activity.active();
                if (!activity) return;
                
                const title = activity.movie?.title || activity.movie?.name || activity.movie?.original_title || activity.movie?.original_name;
                const episode = activity.episode ?? Lampa.Player?.episode?.number;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —ç–ø–∏–∑–æ–¥–∞
                const titleChanged = title && title !== this.currentTitle;
                const episodeChanged = episode && episode !== this.currentEpisode;
                
                if (titleChanged || episodeChanged) {
                    this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: title="${title}" (–±—ã–ª–æ "${this.currentTitle}"), episode=${episode} (–±—ã–ª–æ ${this.currentEpisode})`, 'debug');
                    this.onTitleChange(title, episode);
                }
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                this.checkForNewVideoElements();
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`, 'debug');
            }
        }

        checkForNewVideoElements() {
            const videos = document.querySelectorAll('video');
            const currentVideoCount = videos.length;
            
            if (currentVideoCount !== this.lastVideoCount) {
                this.lastVideoCount = currentVideoCount;
                this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentVideoCount}`, 'debug');
                
                // –ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏ —É –Ω–∞—Å –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if (currentVideoCount > 0 && this.skipData) {
                    this.startTimelineMonitoring();
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                if (this.currentTitle && currentVideoCount > 0) {
                    setTimeout(() => {
                        this.refreshSkipDataIfNeeded();
                    }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
                }
            }
        }

        async refreshSkipDataIfNeeded() {
            if (!this.currentTitle) return;
            
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            const now = Date.now();
            if (now - this.lastDataRefresh > 30000) {
                this.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ...', 'debug');
                this.lastDataRefresh = now;
                await this.fetchSkipData(this.currentTitle, this.currentEpisode);
            }
        }

        async onTitleChange(title, episode = null) {
            this.currentTitle = title;
            this.currentEpisode = episode;
            this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ: "${title}"${episode ? ` –≠–ø–∏–∑–æ–¥: ${episode}` : ''}`, 'info');
            if (this.settings.autoSkipEnabled) await this.fetchSkipData(title, episode);
        }

        onPlayerStart() {
            this.log('–ü–ª–µ–µ—Ä –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏', 'debug');
            this.startTimelineMonitoring();
            
            // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–µ–µ—Ä–∞
            setTimeout(() => this.recheckCurrentContent(), 1000);
        }

        onPlayerEnd() {
            this.log('–ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'debug');
            if (this.timelineCheckInterval) {
                clearInterval(this.timelineCheckInterval);
                this.timelineCheckInterval = null;
            }
        }

        async recheckCurrentContent() {
            this.log('–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...', 'debug');
            
            try {
                const activity = Lampa.Activity.active();
                if (activity?.movie) {
                    const title = activity.movie.title || activity.movie.name || activity.movie.original_title || activity.movie.original_name;
                    const episode = activity.episode ?? Lampa.Player?.episode?.number;
                    
                    if (title) {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                        if (title !== this.currentTitle || episode !== this.currentEpisode) {
                            this.log(`–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: "${title}" —ç–ø–∏–∑–æ–¥ ${episode}`, 'info');
                            this.currentTitle = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —á—Ç–æ–±—ã –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                            this.currentEpisode = null;
                            await this.onTitleChange(title, episode);
                        }
                    }
                }
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`, 'error');
            }
        }

        async fetchSkipData(title, episode = null) {
            if (!title) return;
            this.log('–ó–∞–ø—Ä–æ—Å –∫ API Anilibria...', 'info');
            const cacheKey = `${CONFIG.cache.prefix}${title}${episode ? `_ep${episode}` : ''}`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ
            if (this.settings.cacheEnabled) {
                const cached = this.getFromCache(cacheKey);
                if (cached) {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–Ω—Ç —á—Ç–æ –∏ —Ä–∞–Ω—å—à–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
                    const sameContent = this.currentTitle === title && this.currentEpisode === episode;
                    if (sameContent) {
                        this.skipData = cached;
                        this.log('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'debug');
                        return;
                    } else {
                        this.log('–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞', 'debug');
                    }
                }
            }

            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞
            const titlesToTry = [
                title,
                title.replace(/[^\w\s–∞-—è—ë]/gi, '').trim(),
                Lampa.Activity.active()?.movie?.original_title || title,
                Lampa.Activity.active()?.movie?.original_name || title,
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–ø–∏–Ω–≥–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
                this.getTitleMapping(title)
            ].filter((t, index, arr) => t && arr.indexOf(t) === index); // —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            if (CONFIG.api.fallbackData) {
                const fallbackData = this.getFallbackSkipData(title);
                if (fallbackData) {
                    this.skipData = fallbackData;
                    if (this.settings.cacheEnabled) this.saveToCache(cacheKey, fallbackData);
                    this.log(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞: ${this.formatSkipData(fallbackData)}`, 'success');
                    
                    const episodeText = episode ? ` (—Å–µ—Ä–∏—è ${episode})` : '';
                    this.showSkipNotification('success', `üì∫ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã${episodeText}`);
                    return;
                }
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            for (const apiEndpoint of CONFIG.api.endpoints) {
                for (const searchTitle of titlesToTry) {
                    try {
                        this.log(`–ü–æ–∏—Å–∫ –∞–Ω–∏–º–µ: "${searchTitle}" —á–µ—Ä–µ–∑ ${apiEndpoint}`, 'debug');
                        
                        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
                        const searchUrls = [
                            `${apiEndpoint}app/search/releases?query=${encodeURIComponent(searchTitle)}&limit=10`,
                            `${apiEndpoint}title/search?search=${encodeURIComponent(searchTitle)}&limit=5`,
                            `${apiEndpoint}getTitle?search=${encodeURIComponent(searchTitle)}`
                        ];
                        
                        for (const searchUrl of searchUrls) {
                            try {
                                this.log(`URL –∑–∞–ø—Ä–æ—Å–∞: ${searchUrl}`, 'debug');
                                
                                const searchResponse = await this.apiRequest(searchUrl);
                                let searchData;
                                
                                try {
                                    searchData = JSON.parse(searchResponse);
                                } catch (parseError) {
                                    this.log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${parseError.message}`, 'debug');
                                    continue;
                                }

                                this.log(`–û—Ç–≤–µ—Ç API: ${JSON.stringify(searchData).substring(0, 200)}...`, 'debug');

                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                                let results = null;
                                if (searchData.data && Array.isArray(searchData.data)) {
                                    results = searchData.data;
                                } else if (Array.isArray(searchData)) {
                                    results = searchData;
                                } else if (searchData.result && Array.isArray(searchData.result)) {
                                    results = searchData.result;
                                }

                                if (!results || results.length === 0) {
                                    this.log(`–ê–Ω–∏–º–µ "${searchTitle}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞`, 'debug');
                                    continue;
                                }

                                // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
                                const animeData = results[0];
                                this.log(`–ù–∞–π–¥–µ–Ω–æ –∞–Ω–∏–º–µ: ${animeData.names?.ru || animeData.names?.en || animeData.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ'}`, 'success');

                                // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
                                const skipData = this.extractSkipData(animeData, episode);
                                if (skipData) {
                                    this.skipData = skipData;
                                    if (this.settings.cacheEnabled) this.saveToCache(cacheKey, skipData);
                                    this.log(`–î–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–∞–π–¥–µ–Ω—ã: ${this.formatSkipData(skipData)}`, 'success');
                                    this.showSkipNotification('success', '–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ API');
                                    return;
                                }
                            } catch (urlError) {
                                this.log(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${searchUrl}: ${urlError.message}`, 'debug');
                                continue;
                            }
                        }
                    } catch (error) {
                        this.log(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è "${searchTitle}" —á–µ—Ä–µ–∑ ${apiEndpoint}: ${error.message}`, 'debug');
                        continue;
                    }
                }
            }
            
            this.log('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –±–∞–∑–µ', 'warning');
            this.showSkipNotification('warning', '–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–ª–∞–≥–∏–Ω.');
        }

        getTitleMapping(title) {
            const mappings = {
                '–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞': 'Tate no Yuusha no Nariagari',
                '–ú–∞–≥–∏—è –∏ –º—É—Å–∫—É–ª—ã': 'Mashle',
                '–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –î–∂–æ–î–∂–æ': 'JoJo no Kimyou na Bouken',
                '–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤': 'Shingeki no Kyojin',
                '–ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤': 'Kimetsu no Yaiba',
                '–ú–æ—è –≥–µ—Ä–æ–π—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è': 'Boku no Hero Academia',
                '–¢–æ–∫–∏–π—Å–∫–∏–π –≥—É–ª—å': 'Tokyo Ghoul',
                '–ù–∞—Ä—É—Ç–æ': 'Naruto',
                '–ë–ª–∏—á': 'Bleach',
                '–í–∞–Ω-–ü–∏—Å': 'One Piece'
            };
            return mappings[title] || title;
        }

        // –í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
        getFallbackSkipData(title) {
            const fallbackDatabase = {
                '–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞': {
                    intro: { start: 110, end: 200 },
                    outro: { start: 1310, end: 1435 }
                },
                'Tate no Yuusha no Nariagari': {
                    intro: { start: 110, end: 200 },
                    outro: { start: 1310, end: 1435 }
                },
                '–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤': {
                    intro: { start: 85, end: 175 },
                    outro: { start: 1290, end: 1420 }
                },
                'Shingeki no Kyojin': {
                    intro: { start: 85, end: 175 },
                    outro: { start: 1290, end: 1420 }
                },
                '–ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤': {
                    intro: { start: 95, end: 185 },
                    outro: { start: 1275, end: 1410 }
                },
                'Kimetsu no Yaiba': {
                    intro: { start: 95, end: 185 },
                    outro: { start: 1275, end: 1410 }
                },
                '–ú–æ—è –≥–µ—Ä–æ–π—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è': {
                    intro: { start: 75, end: 165 },
                    outro: { start: 1295, end: 1425 }
                },
                'Boku no Hero Academia': {
                    intro: { start: 75, end: 165 },
                    outro: { start: 1295, end: 1425 }
                },
                '–ù–∞—Ä—É—Ç–æ': {
                    intro: { start: 90, end: 180 },
                    outro: { start: 1320, end: 1450 }
                },
                'Naruto': {
                    intro: { start: 90, end: 180 },
                    outro: { start: 1320, end: 1450 }
                },
                '–¢–æ–∫–∏–π—Å–∫–∏–π –≥—É–ª—å': {
                    intro: { start: 60, end: 150 },
                    outro: { start: 1200, end: 1330 }
                },
                'Tokyo Ghoul': {
                    intro: { start: 60, end: 150 },
                    outro: { start: 1200, end: 1330 }
                }
            };

            const skipData = fallbackDatabase[title] || fallbackDatabase[this.getTitleMapping(title)];
            if (skipData) {
                this.log(`–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è "${title}"`, 'info');
                return skipData;
            }
            return null;
        }

        async apiRequest(url, retries = 1) {
            for (let i = 0; i < retries; i++) {
                try {
                    const controller = new AbortController();
                    const timeoutId = setTimeout(() => controller.abort(), CONFIG.api.timeout);
                    
                    this.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}): ${url}`, 'debug');
                    
                    const response = await fetch(url, {
                        method: 'GET',
                        signal: controller.signal,
                        headers: {
                            'User-Agent': `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 Lampa/${CONFIG.name}/${CONFIG.version}`,
                            'Accept': 'application/json, text/plain, */*',
                            'Accept-Language': 'ru-RU,ru;q=0.9,en;q=0.8',
                            'Cache-Control': 'no-cache',
                            'Pragma': 'no-cache'
                        }
                    });
                    
                    clearTimeout(timeoutId);
                    
                    this.log(`–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status}`, 'debug');
                    
                    if (response.status === 403) {
                        this.log('API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω (403 Forbidden) - –≤–æ–∑–º–æ–∂–Ω–æ CloudFlare –∑–∞—â–∏—Ç–∞', 'warning');
                        throw new Error('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: 403 Forbidden (CloudFlare protection)');
                    }
                    
                    if (response.status === 429) {
                        this.log('Rate limit, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...', 'warning');
                        await this.sleep(Math.pow(2, i) * 2000);
                        continue;
                    }
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    const responseText = await response.text();
                    this.log(`–†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤`, 'debug');
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã HTML –≤–º–µ—Å—Ç–æ JSON (CloudFlare —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
                    if (responseText.includes('<html>') || responseText.includes('403 Forbidden')) {
                        throw new Error('–ü–æ–ª—É—á–µ–Ω–∞ HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–º–µ—Å—Ç–æ JSON - API –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
                    }
                    
                    return responseText;
                } catch (error) {
                    this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`, 'debug');
                    if (error.message.includes('CloudFlare') || error.message.includes('403') || error.message.includes('HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞')) {
                        throw error; // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ CloudFlare
                    }
                    if (i === retries - 1) throw error;
                    await this.sleep(Math.pow(2, i) * 1000);
                }
            }
        }

        extractSkipData(animeData, episode = null) {
            try {
                this.log(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–∞ –∏–∑: ${JSON.stringify(animeData).substring(0, 200)}...`, 'debug');
                
                // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API v1 anilibria.top
                if (!animeData.player || !animeData.player.episodes) {
                    this.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–ª–µ–µ—Ä–∞ –∏–ª–∏ —ç–ø–∏–∑–æ–¥–æ–≤', 'debug');
                    return null;
                }

                let episodeData = null;
                
                if (episode !== null) {
                    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ø–∏–∑–æ–¥
                    episodeData = animeData.player.episodes[episode.toString()] || 
                                 animeData.player.episodes[episode] ||
                                 animeData.player.episodes[`${episode}`];
                } 
                
                if (!episodeData) {
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —ç–ø–∏–∑–æ–¥
                    const episodes = Object.values(animeData.player.episodes);
                    if (episodes.length > 0) {
                        episodeData = episodes[0];
                    }
                }

                if (!episodeData) {
                    this.log('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞', 'debug');
                    return null;
                }

                this.log(`–î–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞: ${JSON.stringify(episodeData).substring(0, 200)}...`, 'debug');

                if (episodeData.skips) {
                    return this.parseSkipTimings(episodeData.skips);
                }

                // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
                if (episodeData.timing || episodeData.skip_data || episodeData.markers) {
                    const skipField = episodeData.timing || episodeData.skip_data || episodeData.markers;
                    return this.parseSkipTimings(skipField);
                }

                this.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –≤ —ç–ø–∏–∑–æ–¥–µ', 'debug');
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
                return null;
            }
        }

        parseSkipTimings(skips) {
            const result = {};
            
            this.log(`–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${JSON.stringify(skips)}`, 'debug');
            
            try {
                // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
                if (skips.opening && Array.isArray(skips.opening) && skips.opening.length >= 2) {
                    result.intro = { 
                        start: Number(skips.opening[0]), 
                        end: Number(skips.opening[1]) 
                    };
                }
                
                if (skips.ending && Array.isArray(skips.ending) && skips.ending.length >= 2) {
                    result.outro = { 
                        start: Number(skips.ending[0]), 
                        end: Number(skips.ending[1]) 
                    };
                }

                // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—è
                if (skips.intro && Array.isArray(skips.intro) && skips.intro.length >= 2) {
                    result.intro = { 
                        start: Number(skips.intro[0]), 
                        end: Number(skips.intro[1]) 
                    };
                }
                
                if (skips.outro && Array.isArray(skips.outro) && skips.outro.length >= 2) {
                    result.outro = { 
                        start: Number(skips.outro[0]), 
                        end: Number(skips.outro[1]) 
                    };
                }

                // –§–æ—Ä–º–∞—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –≤–º–µ—Å—Ç–æ –º–∞—Å—Å–∏–≤–æ–≤
                if (skips.opening && typeof skips.opening === 'object' && skips.opening.start !== undefined) {
                    result.intro = { 
                        start: Number(skips.opening.start), 
                        end: Number(skips.opening.end || skips.opening.start + 90) 
                    };
                }
                
                if (skips.ending && typeof skips.ending === 'object' && skips.ending.start !== undefined) {
                    result.outro = { 
                        start: Number(skips.ending.start), 
                        end: Number(skips.ending.end || skips.ending.start + 90) 
                    };
                }

                this.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: ${JSON.stringify(result)}`, 'debug');
                
                return Object.keys(result).length > 0 ? result : null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${error.message}`, 'error');
                return null;
            }
        }

        startTimelineMonitoring() {
            if (this.timelineCheckInterval) clearInterval(this.timelineCheckInterval);
            this.log('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞—Ç', 'debug');
            this.timelineCheckInterval = setInterval(() => {
                if (this.settings.autoSkipEnabled && this.skipData) {
                    try {
                        const video = this.getVideoElement();
                        if (video && video.currentTime !== undefined) {
                            this.onTimeUpdate(video.currentTime);
                        }
                    } catch (error) {
                        this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: ${error.message}`, 'debug');
                    }
                }
            }, CONFIG.skip.checkInterval);
        }

        getVideoElement() {
            // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä
            try {
                // –°–ø–æ—Å–æ–± 1: –ß–µ—Ä–µ–∑ Lampa.Player
                if (typeof Lampa !== 'undefined' && Lampa.Player && Lampa.Player.video) {
                    const video = Lampa.Player.video();
                    if (video && video.currentTime !== undefined) {
                        this.log(`–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Lampa.Player: –≤—Ä–µ–º—è ${this.formatTime(video.currentTime)}`, 'debug');
                        return video;
                    }
                }

                // –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ DOM
                const videoElements = document.querySelectorAll('video');
                for (let video of videoElements) {
                    if (video.currentTime !== undefined && video.duration > 0) {
                        this.log(`–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM: –≤—Ä–µ–º—è ${this.formatTime(video.currentTime)}`, 'debug');
                        return video;
                    }
                }

                // –°–ø–æ—Å–æ–± 3: –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –¥–ª—è Lampa –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö
                const selectors = [
                    '.player video',
                    '.player-video video', 
                    '#player video',
                    '.lampa-player video',
                    '.video-player video'
                ];
                
                for (let selector of selectors) {
                    const video = document.querySelector(selector);
                    if (video && video.currentTime !== undefined) {
                        this.log(`–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä ${selector}: –≤—Ä–µ–º—è ${this.formatTime(video.currentTime)}`, 'debug');
                        return video;
                    }
                }

                this.log('–í–∏–¥–µ–æ–ø–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'debug');
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä–∞: ${error.message}`, 'debug');
                return null;
            }
        }

        onTimeUpdate(currentTime) {
            if (!this.settings.autoSkipEnabled || !this.skipData || !currentTime) return;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç—Ä–æ
            if (this.skipData.intro && 
                currentTime >= this.skipData.intro.start && 
                currentTime <= this.skipData.intro.end) {
                this.performSkip('intro', this.skipData.intro.end);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç—Ä–æ
            if (this.skipData.outro && 
                currentTime >= this.skipData.outro.start && 
                currentTime <= this.skipData.outro.end) {
                this.performSkip('outro', this.skipData.outro.end);
            }
        }

        performSkip(type, targetTime) {
            if (!this.settings.autoSkipEnabled) return;
            
            const now = Date.now();
            if (now - this.lastSkipTime < 2000) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∏
            
            this.lastSkipTime = now;
            
            try {
                const video = this.getVideoElement();
                if (!video) {
                    this.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ ${type}`, 'error');
                    return;
                }
                
                const currentTime = video.currentTime;
                this.log(`${type} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ ${this.formatTime(currentTime)} - –ø—Ä–æ–ø—É—Å–∫ –¥–æ ${this.formatTime(targetTime)}`, 'info');
                
                if (this.settings.showNotifications) {
                    this.showSkipNotification(type, `‚è© –ü—Ä–æ–ø—É—Å–∫ ${type === 'intro' ? '–∑–∞—Å—Ç–∞–≤–∫–∏' : '—Ç–∏—Ç—Ä–æ–≤'}`);
                }
                
                setTimeout(() => {
                    try {
                        video.currentTime = targetTime;
                        this.log(`‚úÖ –ü—Ä–æ–ø—É—Å–∫ ${type} –≤—ã–ø–æ–ª–Ω–µ–Ω: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è ${this.formatTime(targetTime)}`, 'success');
                        
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫ —Å—Ä–∞–±–æ—Ç–∞–ª
                        setTimeout(() => {
                            if (Math.abs(video.currentTime - targetTime) > 2) {
                                this.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º: –æ–∂–∏–¥–∞–ª–æ—Å—å ${this.formatTime(targetTime)}, –ø–æ–ª—É—á–µ–Ω–æ ${this.formatTime(video.currentTime)}`, 'warning');
                            }
                        }, 1000);
                        
                    } catch (skipError) {
                        this.log(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: ${skipError.message}`, 'error');
                        
                        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
                        try {
                            const seekEvent = new CustomEvent('seek', { detail: { time: targetTime } });
                            video.dispatchEvent(seekEvent);
                            this.log('–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è', 'debug');
                        } catch (eventError) {
                            this.log(`–û—à–∏–±–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–æ–ø—É—Å–∫–∞: ${eventError.message}`, 'error');
                        }
                    }
                }, this.settings.skipDelay);
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞: ${error.message}`, 'error');
            }
        }

        showSkipNotification(type, message = null) {
            let displayMessage;
            
            if (message) {
                displayMessage = message;
            } else {
                switch (type) {
                    case 'intro':
                        displayMessage = '‚è© –ü—Ä–æ–ø—É—Å–∫ –∑–∞—Å—Ç–∞–≤–∫–∏';
                        break;
                    case 'outro':
                        displayMessage = '‚è© –ü—Ä–æ–ø—É—Å–∫ —Ç–∏—Ç—Ä–æ–≤';
                        break;
                    case 'success':
                        displayMessage = '‚úÖ –£—Å–ø–µ—à–Ω–æ';
                        break;
                    case 'error':
                        displayMessage = '‚ùå –û—à–∏–±–∫–∞';
                        break;
                    case 'warning':
                        displayMessage = '‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ';
                        break;
                    default:
                        displayMessage = '‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ';
                }
            }
            
            try {
                if (typeof Lampa !== 'undefined' && Lampa.Noty) {
                    Lampa.Noty.show(displayMessage, {timeout: CONFIG.skip.notificationDuration});
                } else {
                    // Fallback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
                    const div = document.createElement('div');
                    div.style.cssText = `
                        position: fixed; 
                        top: 20px; 
                        right: 20px; 
                        padding: 12px 18px; 
                        background: linear-gradient(135deg, rgba(0,0,0,0.9), rgba(20,20,20,0.9)); 
                        color: #fff; 
                        border-radius: 8px; 
                        z-index: 99999;
                        font-size: 14px;
                        font-weight: 500;
                        max-width: 350px;
                        box-shadow: 0 4px 20px rgba(0,0,0,0.3);
                        border: 1px solid rgba(255,255,255,0.1);
                        backdrop-filter: blur(10px);
                        animation: slideIn 0.3s ease-out;
                    `;
                    div.textContent = displayMessage;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
                    const style = document.createElement('style');
                    style.textContent = `
                        @keyframes slideIn {
                            from { transform: translateX(100%); opacity: 0; }
                            to { transform: translateX(0); opacity: 1; }
                        }
                    `;
                    document.head.appendChild(style);
                    
                    document.body.appendChild(div);
                    setTimeout(() => {
                        if (div.parentNode) {
                            div.style.animation = 'slideIn 0.3s ease-out reverse';
                            setTimeout(() => {
                                if (div.parentNode) div.parentNode.removeChild(div);
                            }, 300);
                        }
                    }, CONFIG.skip.notificationDuration);
                }
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`, 'debug');
            }
        }

        saveToCache(key, data) {
            try {
                if (this.cache.size >= CONFIG.cache.maxSize) {
                    const firstKey = this.cache.keys().next().value;
                    this.cache.delete(firstKey);
                }
                this.cache.set(key, { data, timestamp: Date.now() });
                Lampa.Storage.set(key, data);
                this.log(`–î–∞–Ω–Ω—ã–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω—ã: ${key}`, 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, 'error');
            }
        }

        getFromCache(key) {
            try {
                const memoryCache = this.cache.get(key);
                if (memoryCache && Date.now() - memoryCache.timestamp < CONFIG.cache.expiry) {
                    return memoryCache.data;
                }
                
                const storageCache = Lampa.Storage.get(key);
                if (storageCache) return storageCache;
                
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∞: ${error.message}`, 'error');
                return null;
            }
        }

        clearCache() {
            try {
                this.cache.clear();
                const keys = [];
                for (let i = 0; i < localStorage.length; i++) {
                    const key = localStorage.key(i);
                    if (key?.startsWith(CONFIG.cache.prefix)) keys.push(key);
                }
                keys.forEach(key => Lampa.Storage.set(key, null));
                this.log('–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω', 'info');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: ${error.message}`, 'error');
            }
        }

        formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }

        formatSkipData(skipData) {
            const parts = [];
            if (skipData.intro) parts.push(`–∑–∞—Å—Ç–∞–≤–∫–∞ ${this.formatTime(skipData.intro.start)}-${this.formatTime(skipData.intro.end)}`);
            if (skipData.outro) parts.push(`—Ç–∏—Ç—Ä—ã ${this.formatTime(skipData.outro.start)}-${this.formatTime(skipData.outro.end)}`);
            return parts.join(', ');
        }

        sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        log(message, type = 'info') {
            if (!this.settings.debugEnabled && type === 'debug') return;
            
            const prefix = '[AnilibriaAutoSkip]';
            const timestamp = new Date().toLocaleTimeString();
            
            switch (type) {
                case 'success':
                    console.log(`%c${prefix} ${timestamp} ${message}`, 'color: #10b981; font-weight: bold;');
                    break;
                case 'error':
                    console.error(`%c${prefix} ${timestamp} ${message}`, 'color: #ef4444; font-weight: bold;');
                    break;
                case 'warning':
                    console.warn(`%c${prefix} ${timestamp} ${message}`, 'color: #f59e0b; font-weight: bold;');
                    break;
                case 'debug':
                    console.log(`%c${prefix} ${timestamp} ${message}`, 'color: #6b7280;');
                    break;
                default:
                    console.log(`%c${prefix} ${timestamp} ${message}`, 'color: #3b82f6;');
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    const pluginInstance = new AnilibriaAutoSkipPlugin();
    
    // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    window.anilibriaAutoSkip = pluginInstance;
    window.AnilibriaAutoSkipPlugin = pluginInstance;

})();
