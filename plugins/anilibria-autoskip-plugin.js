/**
 * Anilibria Auto-Skip Plugin v2.1.1
 *
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞—Å—Ç–∞–≤–æ–∫ –∏ —Ç–∏—Ç—Ä–æ–≤ –≤ –∞–Ω–∏–º–µ –æ—Ç –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
 *
 * –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v2.1.1:
 * - –£–ª—É—á—à–µ–Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å–µ—Ä–∏–∏.
 * - –£—Å–∏–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ "—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ" –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π.
 * - –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤.
 * - –£—Å—Ç—Ä–∞–Ω–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ª–æ–∂–Ω—ã–º–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º–∏ –ø–æ –Ω–∞–≤–µ–¥–µ–Ω–∏—é –∫—É—Ä—Å–æ—Ä–∞ (hover)
 * - –£–¥–∞–ª–µ–Ω—ã –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ API-–∑–∞–ø—Ä–æ—Å—ã –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
 * - –†–∞—Å—à–∏—Ä–µ–Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä—É—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ UI
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
 *
 * URL: http://localhost:5000/anilibria-autoskip-plugin.js
 */
(function() {
    'use strict';

    const CONFIG = {
        id: 'anilibria_autoskip',
        name: 'Anilibria Auto-Skip Universal',
        version: '2.1.1',
        api: {
            // API –∑–∞–ø—Ä–æ—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
            // endpoints: [
            //     'https://api.anilibria.tv/v3/',
            //     'https://anilibria.tv/api/v2/',
            //     'https://anilibria.top/api/v1/'
            // ],
            timeout: 10000,
            retries: 3,
            fallbackData: true
        },
        cache: {
            prefix: 'anilibria_skip_v2_',
            expiry: 12 * 60 * 60 * 1000, // 12 —á–∞—Å–æ–≤
            maxSize: 100
        },
        skip: {
            defaultDelay: 800,
            notificationDuration: 4000,
            checkInterval: 300
        },
        settings: {
            autoSkipEnabled: true,
            debugEnabled: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            skipDelay: 800,
            cacheEnabled: true,
            showNotifications: true,
            universalMode: true, // –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            manualSkipButton: true // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
        }
    };

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–æ–≤
    const EPISODE_SELECTORS = [
        // Lampa —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ
        '.series__episode.active',
        '.series__episode.focus',
        '.episode-item.active',
        '.episode-item.focus',
        '.episode-item.selected',

        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        '.selector.active',
        '.selector.focus',
        '.selector.selected',
        '.item.active',
        '.item.focus',
        '.item.selected',

        // –¢–æ—Ä—Ä–µ–Ω—Ç –ø–ª–µ–µ—Ä—ã
        '.torrent-item.active',
        '.torrent-item.focus',
        '.torrent-item.selected',

        // –û–Ω–ª–∞–π–Ω –ø–ª–µ–µ—Ä—ã
        '.online-item.active',
        '.online-item.focus',
        '.online-prestige.active',
        '.online-prestige.focus',

        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        '.current-episode',
        '.selected-episode',
        '.episode-current',
        '.ep-current',

        // Data –∞—Ç—Ä–∏–±—É—Ç—ã
        '[data-episode]',
        '[data-ep]',
        '[data-episode-number]',

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ
        '.episode-number',
        '.ep-number',
        '.episode',
        '.ep'
    ];

    // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
    const TITLE_SELECTORS = [
        '.full-start__title',
        '.card__title',
        '.player__title',
        '.title',
        '.name',
        '.anime-title',
        '.movie-title',
        '.content-title',
        'h1',
        'h2'
    ];

    if (typeof Lampa === 'undefined') {
        console.warn('[AnilibriaAutoSkip] Lampa API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–ª–∞–≥–∏–Ω –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
        return;
    }

    class AnilibriaAutoSkipPlugin {
        constructor() {
            this.settings = {...CONFIG.settings};
            this.cache = new Map();
            this.currentTitle = null;
            this.currentEpisode = null;
            this.currentSeason = null;
            this.skipData = null;
            this.timelineCheckInterval = null;
            this.lastSkipTime = 0;
            this.isInitialized = false;
            this.lastVideoCount = 0;
            this.lastDataRefresh = 0;
            this.lastActivityCheck = null;
            this.isRecheckInProgress = false;
            this.currentPlayer = null;
            this.currentVideoElement = null;
            this.lastContentHash = null;
            this.lastEpisodeFromDOM = null;
            this.domObserver = null;
            this.episodeChangeCallbacks = [];
            this.titleDatabase = new Map(); // –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –Ω–∞–∑–≤–∞–Ω–∏–π
            this.manualSkipData = new Map(); // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
            this.lastEpisodeChangeTime = 0;
            this.episodeChangeDelay = 1000; // –£–º–µ–Ω—å—à–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å–º–µ–Ω—É —ç–ø–∏–∑–æ–¥–∞
            this.stableEpisodeNumber = null;
            this.isMouseMoving = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            this.lastMouseMoveTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
            this.init();
        }

        /**
         * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ hover —Å–æ–±—ã—Ç–∏–π
         */
        setupMouseDetection() {
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –º—ã—à–∏
            document.addEventListener('mousemove', () => {
                this.isMouseMoving = true;
                this.lastMouseMoveTime = Date.now();

                // –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 500–º—Å –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è
                clearTimeout(this.mouseMoveTimeout);
                this.mouseMoveTimeout = setTimeout(() => {
                    this.isMouseMoving = false;
                }, 500);
            });
        }

        init() {
            try {
                this.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ v2.1.1...', 'info');
                this.loadSettings();
                this.loadManualSkipData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                this.setupLampaIntegration();
                this.setupUniversalEventListeners();
                this.setupAdvancedDOMObserver();
                this.startUniversalActivityMonitoring();
                this.loadLocalTitleDatabase();
                this.setupMouseDetection(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é –º—ã—à–∏
                this.isInitialized = true;
                this.log('‚úÖ –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ', 'success');
                this.showSkipNotification('success', 'üéØ Anilibria Auto-Skip v2.1.1 –≥–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!');

                this.performExtendedDiagnostics();
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        }

        loadSettings() {
            this.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...', 'debug');
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_settings`);
                if (stored) this.settings = {...this.settings, ...stored};

                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º debug –≤ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                this.settings.debugEnabled = false;

                this.log(`üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${JSON.stringify(this.settings)}`, 'debug');
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'warning');
            }
        }

        saveSettings() {
            try {
                Lampa.Storage.set(`${CONFIG.id}_settings`, this.settings);
                this.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'debug');
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'error');
            }
        }

        loadManualSkipData() {
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_manual_skip_data`);
                if (stored) {
                    this.manualSkipData = new Map(Object.entries(stored));
                    this.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Ä—É—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤: ${this.manualSkipData.size} –∑–∞–ø–∏—Å–µ–π`, 'debug');
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä—É—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'warning');
            }
        }

        saveManualSkipData() {
            try {
                Lampa.Storage.set(`${CONFIG.id}_manual_skip_data`, Object.fromEntries(this.manualSkipData));
                this.log('üíæ –†—É—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'debug');
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä—É—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
            }
        }

        setupLampaIntegration() {
            this.log('üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Lampa...', 'debug');
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ Lampa
            Lampa.Settings.listener.follow('open', (e) => {
                if (e.name === '–†–µ–∂–∏–º') { // –ò–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª
                    this.addSettingsButton();
                }
            });
            this.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lampa –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
        }

        addSettingsButton() {
            const button = Lampa.Template.js('settings_button', {
                title: 'Anilibria Auto-Skip',
                subtitle: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞ –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞'
            });

            button.on('click', () => {
                this.openSettings();
            });

            Lampa.Settings.add('anilibria_autoskip_button', button);
        }

        openSettings() {
            const _this = this;
            const settingsList = Lampa.Template.js('settings_list', {});

            const components = [{
                component: 'settings_item',
                name: 'autoSkipEnabled',
                title: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–ø—É—Å–∫',
                subtitle: '–í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–ø—É—Å–∫ –∑–∞—Å—Ç–∞–≤–æ–∫ –∏ —Ç–∏—Ç—Ä–æ–≤',
                type: 'toggle',
                value: this.settings.autoSkipEnabled,
                onChange: (newValue) => {
                    _this.settings.autoSkipEnabled = newValue;
                    _this.saveSettings();
                    _this.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–ø—É—Å–∫: ${newValue ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}`, 'info');
                }
            }, {
                component: 'settings_item',
                name: 'showNotifications',
                title: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                subtitle: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–ø—É—Å–∫–µ',
                type: 'toggle',
                value: this.settings.showNotifications,
                onChange: (newValue) => {
                    _this.settings.showNotifications = newValue;
                    _this.saveSettings();
                    _this.log(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${newValue ? '–í–∫–ª—é—á–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'}`, 'info');
                }
            }, {
                component: 'settings_item',
                name: 'manualSkipButton',
                title: '–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
                subtitle: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä–µ',
                type: 'toggle',
                value: this.settings.manualSkipButton,
                onChange: (newValue) => {
                    _this.settings.manualSkipButton = newValue;
                    _this.saveSettings();
                    _this.log(`–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å": ${newValue ? '–ü–æ–∫–∞–∑–∞–Ω–∞' : '–°–∫—Ä—ã—Ç–∞'}`, 'info');
                    _this.toggleManualSkipButton(newValue);
                }
            }, {
                component: 'settings_item',
                name: 'manualSkipSetup',
                title: '–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞',
                subtitle: '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∏–º–µ',
                type: 'button',
                onClick: () => {
                    _this.openManualSkipSetup();
                }
            }];

            components.forEach(item => {
                const element = Lampa.Template.js(item.component, item);
                if (item.type === 'toggle') {
                    element.find('input').on('change', (e) => item.onChange(e.target.checked));
                } else if (item.type === 'button') {
                    element.on('click', item.onClick);
                }
                settingsList.append(element);
            });

            Lampa.Controller.add('anilibria_autoskip_settings', {
                menu: settingsList,
                title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Anilibria Auto-Skip',
                onBack: () => {
                    Lampa.Controller.go('settings');
                }
            });

            Lampa.Controller.go('anilibria_autoskip_settings');
        }

        openManualSkipSetup() {
            if (!this.currentTitle) {
                this.showSkipNotification('error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∞–Ω–∏–º–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
                return;
            }

            const _this = this;
            const currentManualData = this.manualSkipData.get(this.currentTitle) || {};

            const settingsList = Lampa.Template.js('settings_list', {});

            const createInputItem = (name, title, subtitle, type, value, onChange) => {
                const element = Lampa.Template.js('settings_item', {
                    name: name,
                    title: title,
                    subtitle: subtitle,
                    type: 'input',
                    value: value
                });
                element.find('input').attr('type', type);
                element.find('input').on('input', (e) => onChange(e.target.value));
                return element;
            };

            settingsList.append(Lampa.Template.js('settings_title', { title: `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è: ${this.currentTitle}` }));

            settingsList.append(createInputItem(
                'opening_start',
                '–ù–∞—á–∞–ª–æ –∑–∞—Å—Ç–∞–≤–∫–∏ (—Å–µ–∫)',
                '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)',
                'number',
                currentManualData.opening?.start || '',
                (value) => {
                    if (!_this.manualSkipData.has(_this.currentTitle)) {
                        _this.manualSkipData.set(_this.currentTitle, { opening: {}, ending: {} });
                    }
                    const data = _this.manualSkipData.get(_this.currentTitle);
                    data.opening.start = parseFloat(value) || 0;
                    _this.saveManualSkipData();
                }
            ));

            settingsList.append(createInputItem(
                'opening_end',
                '–ö–æ–Ω–µ—Ü –∑–∞—Å—Ç–∞–≤–∫–∏ (—Å–µ–∫)',
                '–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∑–∞—Å—Ç–∞–≤–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
                'number',
                currentManualData.opening?.end || '',
                (value) => {
                    if (!_this.manualSkipData.has(_this.currentTitle)) {
                        _this.manualSkipData.set(_this.currentTitle, { opening: {}, ending: {} });
                    }
                    const data = _this.manualSkipData.get(_this.currentTitle);
                    data.opening.end = parseFloat(value) || 0;
                    _this.saveManualSkipData();
                }
            ));

            settingsList.append(createInputItem(
                'ending_start',
                '–ù–∞—á–∞–ª–æ —Ç–∏—Ç—Ä–æ–≤ (—Å–µ–∫)',
                '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ç–∏—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è)',
                'number',
                currentManualData.ending?.start || '',
                (value) => {
                    if (!_this.manualSkipData.has(_this.currentTitle)) {
                        _this.manualSkipData.set(_this.currentTitle, { opening: {}, ending: {} });
                    }
                    const data = _this.manualSkipData.get(_this.currentTitle);
                    data.ending.start = parseFloat(value) || 0;
                    _this.saveManualSkipData();
                }
            ));

            settingsList.append(createInputItem(
                'ending_end',
                '–ö–æ–Ω–µ—Ü —Ç–∏—Ç—Ä–æ–≤ (—Å–µ–∫)',
                '–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ —Ç–∏—Ç—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö',
                'number',
                currentManualData.ending?.end || '',
                (value) => {
                    if (!_this.manualSkipData.has(_this.currentTitle)) {
                        _this.manualSkipData.set(_this.currentTitle, { opening: {}, ending: {} });
                    }
                    const data = _this.manualSkipData.get(_this.currentTitle);
                    data.ending.end = parseFloat(value) || 0;
                    _this.saveManualSkipData();
                }
            ));

            const resetButton = Lampa.Template.js('settings_item', {
                name: 'reset_manual_skip',
                title: '–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                subtitle: '–£–¥–∞–ª–∏—Ç—å —Ä—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–Ω–∏–º–µ',
                type: 'button'
            });
            resetButton.on('click', () => {
                _this.manualSkipData.delete(_this.currentTitle);
                _this.saveManualSkipData();
                _this.showSkipNotification('info', `–†—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "${_this.currentTitle}" —Å–±—Ä–æ—à–µ–Ω—ã.`);
                _this.openManualSkipSetup(); // –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            });
            settingsList.append(resetButton);


            Lampa.Controller.add('anilibria_autoskip_manual_setup', {
                menu: settingsList,
                title: `–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞: ${this.currentTitle}`,
                onBack: () => {
                    Lampa.Controller.go('anilibria_autoskip_settings');
                    _this.loadUniversalSkipData(_this.currentTitle); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                }
            });

            Lampa.Controller.go('anilibria_autoskip_manual_setup');
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        setupUniversalEventListeners() {
            this.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π...', 'debug');
            try {
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                Lampa.Listener.follow('full', (e) => {
                    this.handleFullEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã
                Lampa.Listener.follow('player', (e) => {
                    this.handlePlayerEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                Lampa.Listener.follow('activity', (e) => {
                    this.handleActivityEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ - –∫–ª—é—á–µ–≤—ã–µ –¥–ª—è —ç–ø–∏–∑–æ–¥–æ–≤
                Lampa.Listener.follow('series', (e) => {
                    this.handleSeriesEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è —Ç–æ—Ä—Ä–µ–Ω—Ç–æ–≤
                Lampa.Listener.follow('torrent', (e) => {
                    this.handleTorrentEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è –æ–Ω–ª–∞–π–Ω –ø–ª–µ–µ—Ä–æ–≤
                Lampa.Listener.follow('online', (e) => {
                    this.handleOnlineEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è –≤–∏–¥–µ–æ
                Lampa.Listener.follow('video', (e) => {
                    this.handleVideoEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                Lampa.Listener.follow('page', (e) => {
                    this.handlePageEvent(e);
                });

                // –°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                Lampa.Listener.follow('content', (e) => {
                    this.handleContentEvent(e);
                });

                this.log('‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'success');
            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error');
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
         */
        handleFullEvent(e) {
            if (e.type === 'complite' && e.data?.movie) {
                const title = this.extractUniversalTitle(e.data.movie);
                if (title) {
                    this.log(`üì∫ –°–æ–±—ã—Ç–∏–µ full: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                    this.onUniversalTitleChange(title, e.data.movie);
                }
            }
        }

        handlePlayerEvent(e) {
            this.log(`üé¨ –°–æ–±—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞: ${e.type}`, 'debug');

            switch(e.type) {
                case 'start':
                    this.currentPlayer = e.player || null;
                    this.onPlayerStart();
                    this.addManualSkipButton(); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–ª–µ–µ—Ä–∞
                    break;
                case 'timeupdate':
                    this.onTimeUpdate(e.current);
                    break;
                case 'end':
                case 'destroy':
                    this.onPlayerEnd();
                    this.removeManualSkipButton(); // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ/—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –ø–ª–µ–µ—Ä–∞
                    break;
                case 'video':
                    this.currentVideoElement = e.video || null;
                    this.log('üìΩÔ∏è –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä', 'debug');
                    setTimeout(() => this.universalContentRecheck(), 1000);
                    break;
            }
        }

        handleActivityEvent(e) {
            this.log(`üé≠ –°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.type}`, 'debug');
            if (e.type === 'start' && e.object?.movie) {
                const title = this.extractUniversalTitle(e.object.movie);
                if (title) {
                    this.log(`üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                    setTimeout(() => this.onUniversalTitleChange(title, e.object.movie), 500);
                }
            }
        }

        handleSeriesEvent(e) {
            this.log(`üìö –°–æ–±—ã—Ç–∏–µ —Å–µ—Ä–∏–∞–ª–∞: ${e.type}`, 'debug');
            if (e.type === 'episode' || e.type === 'season' || e.type === 'select') {
                this.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞/—Å–µ–∑–æ–Ω–∞', 'info');

                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ø–∏–∑–æ–¥–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
                this.extractEpisodeFromSeriesEvent(e);

                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã DOM —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –¥–∞—Ç—å Lampa –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å DOM –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                setTimeout(() => this.universalContentRecheck(), 800);
            }
        }

        handleTorrentEvent(e) {
            this.log(`üåä –°–æ–±—ã—Ç–∏–µ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞: ${e.type}`, 'debug');
            if (e.type === 'select' || e.type === 'change' || e.type === 'episode') {
                this.log('üîÑ –°–º–µ–Ω–∞ —Ç–æ—Ä—Ä–µ–Ω—Ç–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞', 'info');
                setTimeout(() => this.universalContentRecheck(), 1500);
            }
        }

        handleOnlineEvent(e) {
            this.log(`üì∫ –°–æ–±—ã—Ç–∏–µ –æ–Ω–ª–∞–π–Ω: ${e.type}`, 'debug');
            if (e.type === 'select' || e.type === 'change' || e.type === 'episode') {
                this.log('üîÑ –°–º–µ–Ω–∞ –æ–Ω–ª–∞–π–Ω —ç–ø–∏–∑–æ–¥–∞ - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞', 'info');
                setTimeout(() => this.universalContentRecheck(), 1000);
            }
        }

        handleVideoEvent(e) {
            this.log(`üé• –°–æ–±—ã—Ç–∏–µ –≤–∏–¥–µ–æ: ${e.type}`, 'debug');
            if (e.type === 'start' || e.type === 'load') {
                setTimeout(() => this.universalContentRecheck(), 800);
            }
        }

        handlePageEvent(e) {
            this.log(`üìÑ –°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${e.type}`, 'debug');
            if (e.type === 'player') {
                setTimeout(() => this.universalContentRecheck(), 2000);
            }
        }

        handleContentEvent(e) {
            this.log(`üìã –°–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${e.type}`, 'debug');
            if (e.type === 'change' || e.type === 'start') {
                setTimeout(() => this.universalContentRecheck(), 1200);
            }
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        extractUniversalTitle(movieData) {
            if (!movieData) return null;

            // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            const titleFields = [
                'title', 'name', 'original_title', 'original_name',
                'ru_title', 'en_title', 'jp_title', 'romaji_title',
                'russian_title', 'english_title', 'japanese_title',
                'display_title', 'full_title', 'series_title',
                'anime_title', 'show_title', 'content_title'
            ];

            // –ò—â–µ–º –≤ –ø–æ–ª—è—Ö –æ–±—ä–µ–∫—Ç–∞
            for (const field of titleFields) {
                if (movieData[field] && typeof movieData[field] === 'string') {
                    const title = this.cleanTitle(movieData[field]);
                    if (title.length > 2 && !this.isJunkTitle(title)) return title;
                }
            }

            // –ò—â–µ–º –≤ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
            const nestedObjects = ['movie', 'item', 'data', 'info', 'details'];
            for (const obj of nestedObjects) {
                if (movieData[obj] && typeof movieData[obj] === 'object') {
                    const nestedTitle = this.extractUniversalTitle(movieData[obj]);
                    if (nestedTitle) return nestedTitle;
                }
            }

            return null;
        }

        /**
         * –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
         */
        cleanTitle(title) {
            if (!title) return '';

            return title
                .replace(/^\d+[\.\s]+/, '') // –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–µ
                .replace(/\s*\(\d{4}\).*$/, '') // –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏ –≤—Å—ë –ø–æ—Å–ª–µ –Ω–µ–≥–æ
                .replace(/\s*\[.*?\]/g, '') // –£–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
                .replace(/\s*\(.*?\)/g, '') // –£–±–∏—Ä–∞–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏
                .replace(/\s*-\s*—Å–µ–∑–æ–Ω.*$/i, '') // –£–±–∏—Ä–∞–µ–º "—Å–µ–∑–æ–Ω"
                .replace(/\s*season.*$/i, '') // –£–±–∏—Ä–∞–µ–º "season"
                .replace(/\s*\d+\s*—Å–µ–∑–æ–Ω/i, '') // –£–±–∏—Ä–∞–µ–º "N —Å–µ–∑–æ–Ω"
                .replace(/\s*s\d+/i, '') // –£–±–∏—Ä–∞–µ–º "S1", "S2" –∏ —Ç.–¥.
                .replace(/^\d+[\.\s]*K[\.\s]*/, '') // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä "8.14K")
                .replace(/\d{4}$/, '') // –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –≤ –∫–æ–Ω—Ü–µ
                .replace(/\s+/g, ' ') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã
                .trim();
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è
         */
        onUniversalTitleChange(title, movieData = null) {
            if (!title) return;

            const cleanedTitle = this.cleanTitle(title);
            if (cleanedTitle === this.currentTitle) return;

            this.log(`üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –∞–Ω–∏–º–µ: "${cleanedTitle}"`, 'info');
            this.currentTitle = cleanedTitle;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
            if (movieData) {
                this.titleDatabase.set(cleanedTitle, movieData);
            }

            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
            this.loadUniversalSkipData(cleanedTitle);
        }

        /**
         * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π DOM Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
         */
        setupAdvancedDOMObserver() {
            this.log('üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ DOM Observer...', 'debug');

            if (this.domObserver) {
                this.domObserver.disconnect();
            }

            this.domObserver = new MutationObserver((mutations) => {
                let shouldRecheck = false;

                mutations.forEach((mutation) => {
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ (–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
                    if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                        const target = mutation.target;
                        if (target.classList.contains('active') ||
                            target.classList.contains('focus') ||
                            target.classList.contains('selected')) {
                            shouldRecheck = true;
                        }
                    }

                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                    if (mutation.type === 'childList') {
                        mutation.addedNodes.forEach((node) => {
                            if (node.nodeType === 1) { // Element node
                                const element = node;
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —ç–ø–∏–∑–æ–¥—ã
                                if (element.querySelector &&
                                    EPISODE_SELECTORS.some(selector => element.querySelector(selector))) {
                                    shouldRecheck = true;
                                }
                            }
                        });
                    }
                });

                if (shouldRecheck) {
                    // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ DOM Observer
                    setTimeout(() => this.universalContentRecheck(), 300);
                }
            });

            // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
            this.domObserver.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: true,
                attributeFilter: ['class', 'data-episode', 'data-ep']
            });

            this.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π DOM Observer –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'success');
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
         */
        universalContentRecheck() {
            if (this.isRecheckInProgress) return;
            this.isRecheckInProgress = true;

            this.log('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...', 'debug');

            try {
                // 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥
                const episodeInfo = this.findUniversalEpisodeNumber();

                // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ)
                if (!this.currentTitle) {
                    const title = this.findUniversalTitle();
                    if (title) {
                        this.onUniversalTitleChange(title);
                    }
                }

                // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                const contentHash = this.generateContentHash(this.currentTitle, episodeInfo.season, episodeInfo.episode);

                if (contentHash !== this.lastContentHash) {
                    this.log(`üîÑ –ö–û–ù–¢–ï–ù–¢ –ò–ó–ú–ï–ù–ò–õ–°–Ø! –°—Ç–∞—Ä—ã–π: ${this.lastContentHash} -> –ù–æ–≤—ã–π: ${contentHash}`, 'info');

                    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç–ø–∏–∑–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º currentEpisode
                    if (episodeInfo.episode !== this.currentEpisode) {
                        this.log(`üì∫ –°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: ${this.currentEpisode} -> ${episodeInfo.episode}`, 'info');
                        this.currentEpisode = episodeInfo.episode;
                    }

                    if (episodeInfo.season !== this.currentSeason) {
                        this.log(`üìö –°–º–µ–Ω–∞ —Å–µ–∑–æ–Ω–∞: ${this.currentSeason} -> ${episodeInfo.season}`, 'info');
                        this.currentSeason = episodeInfo.season;
                    }

                    this.lastContentHash = contentHash;
                    this.startUniversalAutoSkipMonitoring();
                }

            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'error');
            } finally {
                this.isRecheckInProgress = false;
            }
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
         */
        findUniversalEpisodeNumber() {
            this.log('üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞...', 'debug');

            const now = Date.now();
            let foundEpisode = null;
            let foundSeason = 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω

            // 1. –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Lampa API (–Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
            const lampaEpisode = this.getEpisodeFromLampaActivity();
            if (lampaEpisode !== null) {
                this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ Lampa Activity (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç): ${lampaEpisode}`, 'debug');
                foundEpisode = lampaEpisode;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ø–∏–∑–æ–¥–æ–≤ –≤ DOM
            if (foundEpisode === null) {
                for (const selector of EPISODE_SELECTORS) {
                    const elements = document.querySelectorAll(selector);
                    for (const element of elements) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–≤–µ–¥–µ–Ω –∫—É—Ä—Å–æ—Ä, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è "–∞–∫—Ç–∏–≤–Ω—ã–º–∏"
                        if (element.matches(':hover') && !element.classList.contains('active') && !element.classList.contains('selected')) {
                            this.log(`‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º hover-—ç–ª–µ–º–µ–Ω—Ç: ${selector}`, 'debug');
                            continue;
                        }
                        const episodeNum = this.extractEpisodeFromElement(element);
                        if (episodeNum !== null) {
                            this.log(`‚úÖ –ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ DOM (${selector}): ${episodeNum}`, 'debug');
                            foundEpisode = episodeNum;
                            break;
                        }
                    }
                    if (foundEpisode !== null) break;
                }
            }

            // 3. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ URL
            if (foundEpisode === null) {
                const episodeFromURL = this.extractEpisodeFromURL();
                if (episodeFromURL !== null) {
                    this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ URL: ${episodeFromURL}`, 'debug');
                    foundEpisode = episodeFromURL;
                }
            }

            // 4. –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã—à—å –Ω–µ –¥–≤–∏–∂–µ—Ç—Å—è)
            if (foundEpisode === null && !this.isMouseMoving) {
                const episodeFromPosition = this.getEpisodeFromPosition();
                if (episodeFromPosition !== null) {
                    this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: ${episodeFromPosition}`, 'debug');
                    foundEpisode = episodeFromPosition;
                }
            }

            // 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
            if (foundEpisode === null) {
                const forcedEpisode = this.forceEpisodeDetection();
                if (forcedEpisode !== null) {
                    this.log(`‚úÖ –≠–ø–∏–∑–æ–¥ –∏–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${forcedEpisode}`, 'debug');
                    foundEpisode = forcedEpisode;
                }
            }


            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞
            if (foundEpisode !== null) {
                // –ï—Å–ª–∏ —ç–ø–∏–∑–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è stableEpisodeNumber, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –±–æ–ª–µ–µ "—Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
                if (foundEpisode !== this.stableEpisodeNumber || (now - this.lastEpisodeChangeTime > 2000)) { // 2 —Å–µ–∫—É–Ω–¥—ã
                    this.stableEpisodeNumber = foundEpisode;
                    this.lastEpisodeChangeTime = now;
                    this.log(`üéØ –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: —Å–µ–∑–æ–Ω ${foundSeason}, —ç–ø–∏–∑–æ–¥ ${foundEpisode}`, 'info');
                }
            } else {
                // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if (now - this.lastEpisodeChangeTime > 5000) { // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    this.stableEpisodeNumber = null;
                    this.log('‚ö†Ô∏è –°—Ç–∞–±–∏–ª—å–Ω—ã–π —ç–ø–∏–∑–æ–¥ —Å–±—Ä–æ—à–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)', 'debug');
                }
            }

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç–ø–∏–∑–æ–¥ (–∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å null)
            const finalEpisode = this.stableEpisodeNumber || foundEpisode;
            this.log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: —Å–µ–∑–æ–Ω ${foundSeason}, —ç–ø–∏–∑–æ–¥ ${finalEpisode}`, 'info');

            return {
                episode: finalEpisode,
                season: foundSeason
            };
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ DOM
         */
        extractEpisodeFromElement(element) {
            if (!element) return null;

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
            const dataAttrs = ['data-episode', 'data-ep', 'data-episode-number', 'data-number'];
            for (const attr of dataAttrs) {
                const value = element.getAttribute(attr);
                if (value) {
                    const num = parseInt(value);
                    if (!isNaN(num) && num > 0) {
                        this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ data-attr ${attr}: ${value}`, 'debug');
                        return num;
                    }
                }
            }

            // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            const text = (element.textContent || element.innerText || '').trim();

            // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
            const patterns = [
                /^(\d+)\./, // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ –∏ —Ç–æ—á–∫–∏ (e.g., "2. –ù–∞–∑–≤–∞–Ω–∏–µ")
                /^(\d+)\s/, // –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å–ª–∞ –∏ –ø—Ä–æ–±–µ–ª–∞ (e.g., "2 –ù–∞–∑–≤–∞–Ω–∏–µ")
                /—ç–ø–∏–∑–æ–¥\s*(\d+)/i, // "—ç–ø–∏–∑–æ–¥ N"
                /—Å–µ—Ä–∏—è\s*(\d+)/i, // "—Å–µ—Ä–∏—è N"
                /episode\s*(\d+)/i, // "episode N"
                /ep\.?\s*(\d+)/i, // "ep N" –∏–ª–∏ "ep. N"
                /(\d+)\s*—ç–ø–∏–∑–æ–¥/i, // "N —ç–ø–∏–∑–æ–¥"
                /(\d+)\s*—Å–µ—Ä–∏—è/i, // "N —Å–µ—Ä–∏—è"
                /(\d+)$/ // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–º
            ];

            for (const pattern of patterns) {
                const match = text.match(pattern);
                if (match) {
                    const num = parseInt(match[1]);
                    if (!isNaN(num) && num > 0) {
                        this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ${pattern}: "${text}" -> ${num}`, 'debug');
                        return num;
                    }
                }
            }

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–π —Ç–µ–∫—Å—Ç
            const pureNum = parseInt(text);
            if (!isNaN(pureNum) && pureNum > 0 && text.length <= 4) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞
                this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ —á–∏—Å—Ç–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: "${text}" -> ${pureNum}`, 'debug');
                return pureNum;
            }

            return null;
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Lampa
         */
        getEpisodeFromLampaActivity() {
            try {
                if (Lampa.Activity && Lampa.Activity.active()) {
                    const activity = Lampa.Activity.active();
                    if (activity && activity.component) {
                        const component = activity.component;

                        // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ (–æ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã—Ö –∫ –º–µ–Ω–µ–µ)
                        const episodeSources = [
                            () => component.episode,
                            () => component.current_episode,
                            () => component.selected_episode,
                            () => Lampa.Player?.info?.episode, // –ü—Ä—è–º–æ –∏–∑ –ø–ª–µ–µ—Ä–∞
                            () => Lampa.Player?.info?.movie?.episode, // –ò–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –≤ –ø–ª–µ–µ—Ä–µ
                            () => Lampa.Storage.get('player_episode'),
                            () => Lampa.Storage.get('current_episode'),
                            () => Lampa.Storage.get('active_episode'),
                            () => component.data?.episode,
                            () => component.object?.episode,
                            () => component.movie?.episode,
                            () => component.movie?.episodes?.current,
                            () => component.movie?.episodes?.active,
                            () => component.torrent?.episode,
                            () => component.online?.episode,
                            () => component.player?.episode,
                            () => component.files?.active?.episode,
                            () => component.files?.current?.episode
                        ];

                        for (const source of episodeSources) {
                            try {
                                const episode = source();
                                if (episode !== undefined && episode !== null && !isNaN(parseInt(episode))) {
                                    const num = parseInt(episode);
                                    if (num > 0) {
                                        this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ Lampa Activity (–∏—Å—Ç–æ—á–Ω–∏–∫): ${source.toString()} -> ${num}`, 'debug');
                                        return num;
                                    }
                                }
                            } catch (e) {
                                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                                this.log(`DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ Lampa Activity: ${e.message}`, 'debug');
                            }
                        }

                        // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —Ñ–∞–π–ª–∞
                        if (component.files && component.files.current >= 0) {
                            const fileIndex = component.files.current;
                            if (fileIndex >= 0) {
                                const episodeNum = fileIndex + 1; // –ò–Ω–¥–µ–∫—Å —Ñ–∞–π–ª–∞ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
                                this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ –∏–Ω–¥–µ–∫—Å–∞ —Ñ–∞–π–ª–∞: ${episodeNum}`, 'debug');
                                return episodeNum;
                            }
                        }

                        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ torrent/online
                        if (component.torrent && component.torrent.current >= 0) {
                            const episodeNum = component.torrent.current + 1;
                            this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ —Ç–æ—Ä—Ä–µ–Ω—Ç –∏–Ω–¥–µ–∫—Å–∞: ${episodeNum}`, 'debug');
                            return episodeNum;
                        }

                        if (component.online && component.online.current >= 0) {
                            const episodeNum = component.online.current + 1;
                            this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ –æ–Ω–ª–∞–π–Ω –∏–Ω–¥–µ–∫—Å–∞: ${episodeNum}`, 'debug');
                            return episodeNum;
                        }
                    }
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –∏–∑ Lampa Activity: ${error.message}`, 'warning');
            }

            return null;
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ URL
         */
        extractEpisodeFromURL() {
            const url = window.location.href;
            const patterns = [
                /episode[=\/](\d+)/i,
                /ep[=\/](\d+)/i,
                /—Å–µ—Ä–∏—è[=\/](\d+)/i,
                /—ç–ø–∏–∑–æ–¥[=\/](\d+)/i
            ];

            for (const pattern of patterns) {
                const match = url.match(pattern);
                if (match) {
                    const num = parseInt(match[1]);
                    if (!isNaN(num) && num > 0) {
                        this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ URL: ${num}`, 'debug');
                        return num;
                    }
                }
            }

            return null;
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ (–û–¢–ö–õ–Æ–ß–ï–ù–û –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏)
         */
        getEpisodeFromPosition() {
            try {
                const now = Date.now();

                // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –º—ã—à—å –∞–∫—Ç–∏–≤–Ω–æ –¥–≤–∏–∂–µ—Ç—Å—è
                if (this.isMouseMoving || (now - this.lastMouseMoveTime < 1000)) {
                    this.log('‚ö†Ô∏è –ú—ã—à—å –¥–≤–∏–∂–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏.', 'debug');
                    return null;
                }

                // –í—ã–±–∏—Ä–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö/—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                const activeSelectors = [
                    '.selector.active',
                    '.item.active',
                    '.episode-item.active',
                    '.selector.focus',
                    '.item.focus',
                    '.episode-item.focus'
                ];

                for (const activeSelector of activeSelectors) {
                    const activeElement = document.querySelector(activeSelector);
                    if (activeElement) {
                        // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                        const container = activeElement.closest('.selector-list, .items, .episode-list, .torrent-list') ||
                                        activeElement.parentElement;

                        if (container) {
                            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–∞–∫–æ–≥–æ –∂–µ —Ç–∏–ø–∞
                            const allElements = container.querySelectorAll('.selector, .item, .episode-item');
                            const position = Array.from(allElements).indexOf(activeElement);

                            if (position >= 0) {
                                const episodeNum = position + 1;
                                this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ –ø–æ–∑–∏—Ü–∏–∏: ${episodeNum}`, 'debug');
                                return episodeNum;
                            }
                        }
                    }
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`, 'warning');
            }

            return null;
        }

        /**
         * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        forceEpisodeDetection() {
            try {
                // –ì–ª—É–±–æ–∫–∏–π –ø–æ–∏—Å–∫ –≤ –æ–±—ä–µ–∫—Ç–µ Lampa
                if (window.Lampa) {
                    const sources = [
                        () => Lampa.Player?.info?.movie?.episode,
                        () => Lampa.Activity?.active()?.movie?.episode,
                        () => Lampa.Storage.get('player_episode'),
                        () => Lampa.Storage.get('current_episode'),
                        () => Lampa.Storage.get('active_episode')
                    ];

                    for (const source of sources) {
                        try {
                            const episode = source();
                            if (episode !== undefined && episode !== null && !isNaN(parseInt(episode))) {
                                const num = parseInt(episode);
                                if (num > 0) {
                                    this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (Lampa): ${num}`, 'debug');
                                    return num;
                                }
                            }
                        } catch (e) {
                            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                        }
                    }
                }

                // –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                try {
                    const keys = Object.keys(localStorage).filter(key =>
                        key.includes('episode') || key.includes('current') || key.includes('active')
                    );

                    for (const key of keys) {
                        const value = localStorage.getItem(key);
                        if (value && !isNaN(parseInt(value))) {
                            const num = parseInt(value);
                            if (num > 0 && num < 1000) { // –†–∞–∑—É–º–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
                                this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ localStorage (${key}): ${num}`, 'debug');
                                return num;
                            }
                        }
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ localStorage
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞: ${error.message}`, 'warning');
            }

            return null;
        }

        /**
         * –ü–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º DOM
         */
        findUniversalTitle() {
            // 1. –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Lampa Activity
            try {
                if (Lampa.Activity && Lampa.Activity.active()) {
                    const activity = Lampa.Activity.active();
                    if (activity && activity.component && activity.component.movie) {
                        const title = this.extractUniversalTitle(activity.component.movie);
                        if (title) {
                            this.log(`üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑ Lampa Activity: "${title}"`, 'debug');
                            return title;
                        }
                    }
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ Activity: ${error.message}`, 'warning');
            }

            // 2. –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏–π
            const specificSelectors = [
                '.full-start__title',
                '.card__title',
                '.player__title',
                'h1.title',
                'h2.title'
            ];

            for (const selector of specificSelectors) {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    const text = element.textContent || element.innerText || '';
                    const cleanedTitle = this.cleanTitle(text);
                    if (cleanedTitle.length > 3 && !this.isJunkTitle(cleanedTitle)) {
                        this.log(`üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM (${selector}): "${cleanedTitle}"`, 'debug');
                        return cleanedTitle;
                    }
                }
            }

            // 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –æ–±—â–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö, –Ω–æ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            for (const selector of TITLE_SELECTORS) {
                const elements = document.querySelectorAll(selector);
                for (const element of elements) {
                    const text = element.textContent || element.innerText || '';
                    const cleanedTitle = this.cleanTitle(text);
                    if (cleanedTitle.length > 5 && !this.isJunkTitle(cleanedTitle)) {
                        this.log(`üéØ –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ DOM (${selector}): "${cleanedTitle}"`, 'debug');
                        return cleanedTitle;
                    }
                }
            }
            return null;
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º—É—Å–æ—Ä–Ω—ã–º
         */
        isJunkTitle(title) {
            if (!title) return true;

            const junkPatterns = [
                /^\d+[\.\s]*$/, // –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                /^[\d\.\s]+[–öM–ì–¢–ü–≥–º–∫—Ç]/i, // –¶–∏—Ñ—Ä—ã —Å —Ä–∞–∑–º–µ—Ä–Ω—ã–º–∏ –µ–¥–∏–Ω–∏—Ü–∞–º–∏
                /^\d{4}$/, // –¢–æ–ª—å–∫–æ –≥–æ–¥
                /^(HD|4K|1080p|720p)/i, // –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ
                /–ø—Ä–∏—Ä—É—á–∏—Ç—å.*–¥—Ä–∞–∫–æ–Ω/i, // –ò—Å–∫–ª—é—á–∞–µ–º "–ö–∞–∫ –ø—Ä–∏—Ä—É—á–∏—Ç—å –¥—Ä–∞–∫–æ–Ω–∞" - —ç—Ç–æ –Ω–µ –∞–Ω–∏–º–µ
                /^.{1,3}$/, // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                /^\d+[\.\s]*K[\.\s]*/i, // –†–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ "8.14K"
                /^(–∑–∞–≥—Ä—É–∑–∫–∞|loading|menu|–º–µ–Ω—é)/i, // –°–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                /^(–≥–ª–∞–≤–Ω–∞—è|home|settings|–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)/i, // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                /(—Å–µ—Ä–∏—è|—ç–ø–∏–∑–æ–¥)\s*\d+/i // "–°–µ—Ä–∏—è N" –∏–ª–∏ "–≠–ø–∏–∑–æ–¥ N"
            ];

            return junkPatterns.some(pattern => pattern.test(title));
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–ø–∏–∑–æ–¥–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∞–ª–∞
         */
        extractEpisodeFromSeriesEvent(event) {
            if (!event) return;

            const data = event.data || event.object || event.item || event;

            // –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
            const episodeFields = [
                'episode', 'episode_number', 'episodeNumber', 'ep', 'number',
                'index', 'position', 'current_episode', 'selected_episode'
            ];

            for (const field of episodeFields) {
                if (data[field] !== undefined && data[field] !== null) {
                    const num = parseInt(data[field]);
                    if (!isNaN(num) && num > 0) {
                        this.log(`DEBUG: –≠–ø–∏–∑–æ–¥ –∏–∑ —Å–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∞–ª–∞ (${field}): ${num}`, 'debug');
                        this.currentEpisode = num;
                        return;
                    }
                }
            }

            // –ò—â–µ–º –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
            if (data.movie || data.item) {
                const movieData = data.movie || data.item;
                this.extractEpisodeFromSeriesEvent({data: movieData});
            }
        }

        /**
         * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
         */
        generateContentHash(title, season, episode) {
            return `${title || 'null'}_s${season || 'null'}_e${episode || 'null'}`;
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
         */
        startUniversalActivityMonitoring() {
            this.log('üöÄ –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...', 'debug');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            setInterval(() => {
                try {
                    const currentActivity = this.getCurrentActivityName();
                    if (currentActivity !== this.lastActivityCheck) {
                        this.log(`üîÑ –°–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${this.lastActivityCheck} -> ${currentActivity}`, 'debug');
                        this.lastActivityCheck = currentActivity;

                        // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–≤—è–∑–∞–Ω–∞ —Å –ø–ª–µ–µ—Ä–æ–º, –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                        if (currentActivity && (currentActivity.includes('player') || currentActivity.includes('video') || currentActivity.includes('full'))) {
                            setTimeout(() => this.universalContentRecheck(), 1000);
                        }
                    }
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                }
            }, 2000);
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
         */
        getCurrentActivityName() {
            try {
                if (Lampa.Activity && Lampa.Activity.active()) {
                    const activity = Lampa.Activity.active();
                    return activity.activity?.name || activity.name || 'unknown';
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
            }
            return null;
        }

        /**
         * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö
         */
        async loadUniversalSkipData(title) {
            if (!title) return;

            this.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ –¥–ª—è: "${title}"`, 'info');

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—É—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const manualData = this.manualSkipData.get(title);
            if (manualData && (manualData.opening?.start || manualData.ending?.start)) {
                this.log('üìù –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö', 'info');
                this.skipData = manualData;
                return;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–µ—Å–ª–∏ API –±—ã–ª–∏ –±—ã –¥–æ—Å—Ç—É–ø–Ω—ã)
            // const cacheKey = `${CONFIG.cache.prefix}${title}`;
            // if (this.settings.cacheEnabled && this.cache.has(cacheKey)) {
            //     const cached = this.cache.get(cacheKey);
            //     if (Date.now() - cached.timestamp < CONFIG.cache.expiry) {
            //         this.log('üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞', 'debug');
            //         this.skipData = cached.data;
            //         return;
            //     }
            // }

            // 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            this.skipData = this.getBuiltInSkipData(title);
            if (this.skipData) {
                this.log('üìö –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö', 'info');
            } else {
                this.log('‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
            }
        }

        /**
         * –ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º API (–æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ CORS)
         */
        // async fetchFromMultipleAPIs(title) {
        //     this.log('‚ö†Ô∏è API –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã –∏–∑-–∑–∞ CORS –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', 'warning');
        //     return null;
        // }

        /**
         * –ó–∞–ø—Ä–æ—Å –∫ API
         */
        // async fetchFromAPI(endpoint, title) {
        //     const searchUrl = `${endpoint}title/search?search=${encodeURIComponent(title)}`;

        //     const response = await fetch(searchUrl, {
        //         method: 'GET',
        //         headers: {
        //             'Accept': 'application/json',
        //             'User-Agent': 'AnilibriaAutoSkip/2.0.0'
        //         },
        //         timeout: CONFIG.api.timeout
        //     });

        //     if (!response.ok) {
        //         throw new Error(`HTTP ${response.status}`);
        //     }

        //     const data = await response.json();

        //     // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
        //     if (data.data && Array.isArray(data.data)) {
        //         return this.parseAPIResponse(data.data);
        //     } else if (Array.isArray(data)) {
        //         return this.parseAPIResponse(data);
        //     }

        //     return null;
        // }

        /**
         * –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ API
         */
        // parseAPIResponse(apiData) {
        //     if (!apiData || !Array.isArray(apiData) || apiData.length === 0) {
        //         return null;
        //     }

        //     const anime = apiData[0]; // –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç

        //     // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª–µ–π
        //     const skipData = {
        //         opening: this.extractSkipTimes(anime, 'opening'),
        //         ending: this.extractSkipTimes(anime, 'ending'),
        //         episodes: {}
        //     };

        //     // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç–ø–∏–∑–æ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        //     if (anime.episodes && Array.isArray(anime.episodes)) {
        //         anime.episodes.forEach((episode, index) => {
        //             const episodeNum = episode.episode || index + 1;
        //             skipData.episodes[episodeNum] = {
        //                 opening: this.extractSkipTimes(episode, 'opening'),
        //                 ending: this.extractSkipTimes(episode, 'ending')
        //             };
        //         });
        //     }

        //     return skipData;
        // }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
         */
        // extractSkipTimes(data, type) {
        //     if (!data) return null;

        //     const fields = [
        //         `${type}_start`, `${type}_end`,
        //         `${type}Start`, `${type}End`,
        //         `skip_${type}_start`, `skip_${type}_end`
        //     ];

        //     const times = {};
        //     for (const field of fields) {
        //         if (data[field] !== undefined) {
        //             if (field.includes('start')) {
        //                 times.start = parseFloat(data[field]);
        //             } else if (field.includes('end')) {
        //                 times.end = parseFloat(data[field]);
        //             }
        //         }
        //     }

        //     if (times.start !== undefined && times.end !== undefined) {
        //         return times;
        //     }

        //     return null;
        // }

        /**
         * –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–ø—É—Å–∫–∞—Ö –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∞–Ω–∏–º–µ
         * –†–∞—Å—à–∏—Ä–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
         */
        getBuiltInSkipData(title) {
            const builtInData = {
                '–º–∞–≥–∏—è –∏ –º—É—Å–∫—É–ª—ã': {
                    opening: { start: 95, end: 185 },
                    ending: { start: 1320, end: 1440 },
                    episodes: {
                        1: { opening: { start: 0, end: 90 }, ending: { start: 1320, end: 1440 } },
                        2: { opening: { start: 95, end: 185 }, ending: { start: 1310, end: 1430 } }
                    }
                },
                '–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞': {
                    opening: { start: 90, end: 180 },
                    ending: { start: 1300, end: 1420 },
                    episodes: {
                        1: { opening: { start: 0, end: 90 }, ending: { start: 1300, end: 1420 } },
                        2: { opening: { start: 90, end: 180 }, ending: { start: 1290, end: 1410 } },
                        3: { opening: { start: 90, end: 180 }, ending: { start: 1300, end: 1420 } }
                    }
                },
                'tate no yuusha no nariagari': {
                    opening: { start: 90, end: 180 },
                    ending: { start: 1300, end: 1420 }
                },
                'the rising of the shield hero': {
                    opening: { start: 90, end: 180 },
                    ending: { start: 1300, end: 1420 }
                },
                '–∫–ª–∏–Ω–æ–∫ —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤': {
                    opening: { start: 85, end: 175 },
                    ending: { start: 1290, end: 1410 }
                },
                '–∞—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤': {
                    opening: { start: 95, end: 185 },
                    ending: { start: 1320, end: 1440 }
                },
                '–º–æ—è –≥–µ—Ä–æ–π—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è': {
                    opening: { start: 100, end: 190 },
                    ending: { start: 1300, end: 1420 }
                },
                '–º–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞': {
                    opening: { start: 70, end: 160 },
                    ending: { start: 1350, end: 1470 }
                },
                '–¥–æ–∫—Ç–æ—Ä —Å—Ç–æ—É–Ω': {
                    opening: { start: 60, end: 150 },
                    ending: { start: 1300, end: 1420 }
                },
                '—Ä–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ': {
                    opening: { start: 80, end: 170 },
                    ending: { start: 1310, end: 1430 }
                },
                '–≤–∞–Ω–ø–∞–Ω—á–º–µ–Ω': {
                    opening: { start: 75, end: 165 },
                    ending: { start: 1330, end: 1450 }
                },
                '—Å–∞–≥–∞ –æ –≤–∏–Ω–ª–∞–Ω–¥–µ': {
                    opening: { start: 90, end: 180 },
                    ending: { start: 1300, end: 1420 }
                },
                '—á–µ–ª–æ–≤–µ–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞': {
                    opening: { start: 80, end: 170 },
                    ending: { start: 1320, end: 1440 }
                },
                '—Ç–æ–∫–∏–π—Å–∫–∏–π –≥—É–ª—å': {
                    opening: { start: 70, end: 160 },
                    ending: { start: 1280, end: 1400 }
                },
                '—Ç–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏': {
                    opening: { start: 60, end: 150 },
                    ending: { start: 1300, end: 1420 }
                }
            };

            const normalizedTitle = title.toLowerCase();

            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (builtInData[normalizedTitle]) {
                return builtInData[normalizedTitle];
            }

            // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            const titleKeywords = {
                '–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞': ['—â–∏—Ç', 'hero', 'shield', 'tate', 'yuusha', 'nariagari', 'rising'],
                '–º–∞–≥–∏—è –∏ –º—É—Å–∫—É–ª—ã': ['–º–∞–≥–∏—è', '–º—É—Å–∫—É–ª', 'magic', 'muscle', 'mashle'],
                '–∫–ª–∏–Ω–æ–∫ —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤': ['–∫–ª–∏–Ω–æ–∫', '–¥–µ–º–æ–Ω', 'kimetsu', 'yaiba', 'demon', 'slayer'],
                '–∞—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤': ['—Ç–∏—Ç–∞–Ω', 'shingeki', 'kyojin', 'attack', 'titan'],
                '–º–æ—è –≥–µ—Ä–æ–π—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è': ['–≥–µ—Ä–æ–π', '–∞–∫–∞–¥–µ–º–∏—è', 'boku', 'hero', 'academia'],
                '–º–∞–≥–∏—á–µ—Å–∫–∞—è –±–∏—Ç–≤–∞': ['–º–∞–≥–∏—è', '–±–∏—Ç–≤–∞', 'jujutsu', 'kaisen'],
                '–¥–æ–∫—Ç–æ—Ä —Å—Ç–æ—É–Ω': ['–¥–æ–∫—Ç–æ—Ä', '—Å—Ç–æ—É–Ω', 'dr.stone'],
                '—Ä–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è –±–µ–∑—Ä–∞–±–æ—Ç–Ω–æ–≥–æ': ['—Ä–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è', '–±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π', 'mushoku', 'tensei'],
                '–≤–∞–Ω–ø–∞–Ω—á–º–µ–Ω': ['–≤–∞–Ω–ø–∞–Ω—á–º–µ–Ω', 'onepunchman'],
                '—Å–∞–≥–∞ –æ –≤–∏–Ω–ª–∞–Ω–¥–µ': ['–≤–∏–Ω–ª–∞–Ω–¥', 'vinland', 'saga'],
                '—á–µ–ª–æ–≤–µ–∫ –±–µ–Ω–∑–æ–ø–∏–ª–∞': ['–±–µ–Ω–∑–æ–ø–∏–ª–∞', 'chainsaw', 'man'],
                '—Ç–æ–∫–∏–π—Å–∫–∏–π –≥—É–ª—å': ['–≥—É–ª—å', 'tokyo', 'ghoul'],
                '—Ç–µ—Ç—Ä–∞–¥—å —Å–º–µ—Ä—Ç–∏': ['—Ç–µ—Ç—Ä–∞–¥—å', '—Å–º–µ—Ä—Ç—å', 'death', 'note']
            };

            for (const [animeTitle, keywords] of Object.entries(titleKeywords)) {
                for (const keyword of keywords) {
                    if (normalizedTitle.includes(keyword.toLowerCase())) {
                        this.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "${keyword}": "${normalizedTitle}" -> "${animeTitle}"`, 'debug');
                        return builtInData[animeTitle];
                    }
                }
            }

            // –û–±—ã—á–Ω–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for (const [key, data] of Object.entries(builtInData)) {
                if (normalizedTitle.includes(key) || key.includes(normalizedTitle)) {
                    this.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${normalizedTitle}" -> "${key}"`, 'debug');
                    return data;
                }
            }

            return null;
        }

        /**
         * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞
         */
        startUniversalAutoSkipMonitoring() {
            if (!this.settings.autoSkipEnabled || !this.skipData) {
                this.log('‚è∏Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)', 'debug');
                return;
            }

            this.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–ø—Ä–æ–ø—É—Å–∫–∞', 'info');

            if (this.timelineCheckInterval) {
                clearInterval(this.timelineCheckInterval);
            }

            this.timelineCheckInterval = setInterval(() => {
                this.checkUniversalSkipConditions();
            }, CONFIG.skip.checkInterval);
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞
         */
        checkUniversalSkipConditions() {
            try {
                const videoElement = this.findActiveVideoElement();
                if (!videoElement || videoElement.paused) return;

                const currentTime = videoElement.currentTime;
                if (!currentTime || currentTime < 1) return;

                const skipInfo = this.getSkipInfoForCurrentEpisode();
                if (!skipInfo) return;

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Å—Ç–∞–≤–∫—É
                if (skipInfo.opening && this.shouldSkip(currentTime, skipInfo.opening)) {
                    this.performSkip(videoElement, skipInfo.opening.end, '–∑–∞—Å—Ç–∞–≤–∫—É');
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—Ç—Ä—ã
                if (skipInfo.ending && this.shouldSkip(currentTime, skipInfo.ending)) {
                    this.performSkip(videoElement, skipInfo.ending.end, '—Ç–∏—Ç—Ä—ã');
                }

            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞: ${error.message}`, 'error');
            }
        }

        /**
         * –ü–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞
         */
        findActiveVideoElement() {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if (this.currentVideoElement && !this.currentVideoElement.paused) {
                return this.currentVideoElement;
            }

            // –ò—â–µ–º –≤—Å–µ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã
            const videos = document.querySelectorAll('video');
            for (const video of videos) {
                if (video.readyState >= 2 && video.duration > 0 && !video.paused) { // HAVE_CURRENT_DATA
                    this.currentVideoElement = video;
                    return video;
                }
            }

            return null;
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–ø—É—Å–∫–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç–ø–∏–∑–æ–¥–∞
         */
        getSkipInfoForCurrentEpisode() {
            if (!this.skipData) return null;

            // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–ø–∏–∑–æ–¥–∞
            if (this.currentEpisode && this.skipData.episodes && this.skipData.episodes[this.currentEpisode]) {
                return this.skipData.episodes[this.currentEpisode];
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            return {
                opening: this.skipData.opening,
                ending: this.skipData.ending
            };
        }

        /**
         * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
         */
        shouldSkip(currentTime, skipInterval) {
            if (!skipInterval || typeof skipInterval.start !== 'number' || typeof skipInterval.end !== 'number') {
                return false;
            }
            if (skipInterval.start === 0 && skipInterval.end === 0) return false; // –û—Ç–∫–ª—é—á–µ–Ω–æ

            const now = Date.now();
            // –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–º–∏–Ω–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–ø—É—Å–∫–∞–º–∏)
            if (now - this.lastSkipTime < 5000) return false;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
            // –î–æ–±–∞–≤–∏–º –Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫ –≤ 0.5 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–ø—É—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ
            return currentTime >= skipInterval.start - 0.5 && currentTime < skipInterval.end;
        }

        /**
         * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞
         */
        performSkip(videoElement, skipToTime, type) {
            try {
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ skipToTime –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ
                const duration = videoElement.duration;
                const targetTime = Math.min(skipToTime, duration - 1); // –ü–µ—Ä–µ–ø—Ä—ã–≥–∏–≤–∞–µ–º –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É –¥–æ –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "–∑–∞–≤–∏—Å–∞–Ω–∏—è"

                this.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${type} -> ${targetTime.toFixed(2)}—Å (–±—ã–ª–æ ${videoElement.currentTime.toFixed(2)}—Å)`, 'info');

                videoElement.currentTime = targetTime;
                this.lastSkipTime = Date.now();

                if (this.settings.showNotifications) {
                    this.showSkipNotification('info', `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ ${type}`, 2000);
                }

            } catch (error) {
                this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞: ${error.message}`, 'error');
            }
        }

        /**
         * –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã –Ω–∞–∑–≤–∞–Ω–∏–π
         */
        loadLocalTitleDatabase() {
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_title_db`);
                if (stored) {
                    this.titleDatabase = new Map(Object.entries(stored));
                    this.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞: ${this.titleDatabase.size} –Ω–∞–∑–≤–∞–Ω–∏–π`, 'debug');
                }
            } catch (error) {
                this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã: ${error.message}`, 'warning');
            }
        }

        /**
         * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
         */
        onPlayerStart() {
            this.log('üé¨ –ü–ª–µ–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'debug');
            setTimeout(() => this.universalContentRecheck(), 1000);
        }

        onTimeUpdate(currentTime) {
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            if (Math.floor(currentTime) % 30 === 0 && Math.floor(currentTime) !== this.lastCheckedTime) { // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                this.universalContentRecheck();
                this.lastCheckedTime = Math.floor(currentTime);
            }
        }

        onPlayerEnd() {
            this.log('üõë –ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'debug');
            if (this.timelineCheckInterval) {
                clearInterval(this.timelineCheckInterval);
                this.timelineCheckInterval = null;
            }
        }

        /**
         * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –ø–ª–µ–µ—Ä
         */
        addManualSkipButton() {
            if (!this.settings.manualSkipButton) return;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–æ–ø–∫–∞
            if (document.getElementById('anilibria-autoskip-button')) {
                return;
            }

            const videoContainer = document.querySelector('.player-panel'); // –ò—â–µ–º –ø–∞–Ω–µ–ª—å –ø–ª–µ–µ—Ä–∞
            if (!videoContainer) {
                this.log('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–Ω–µ–ª—å –ø–ª–µ–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞.', 'debug');
                return;
            }

            const button = document.createElement('div');
            button.id = 'anilibria-autoskip-button';
            button.className = 'button selector'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å—ã Lampa –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            button.innerHTML = `
                <svg style="width: 24px; height: 24px; vertical-align: middle; margin-right: 5px;" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 14.5v-9l6 4.5-6 4.5z"/>
                </svg>
                <span>–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å</span>
            `;
            button.style.cssText = `
                position: absolute;
                bottom: 20px;
                right: 20px;
                background-color: rgba(0, 0, 0, 0.7);
                color: #fff;
                padding: 10px 15px;
                border-radius: 8px;
                cursor: pointer;
                z-index: 1000;
                display: flex;
                align-items: center;
                font-size: 14px;
                opacity: 0; /* –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */
                transition: opacity 0.3s ease;
            `;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –ø–ª–µ–µ—Ä
            videoContainer.addEventListener('mouseenter', () => {
                button.style.opacity = '1';
            });
            videoContainer.addEventListener('mouseleave', () => {
                button.style.opacity = '0';
            });

            button.onclick = () => {
                const videoElement = this.findActiveVideoElement();
                if (videoElement) {
                    const currentTime = videoElement.currentTime;
                    const skipInfo = this.getSkipInfoForCurrentEpisode();
                    let skipped = false;

                    if (skipInfo) {
                        // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞—Å—Ç–∞–≤–∫—É
                        if (skipInfo.opening && currentTime < skipInfo.opening.end) {
                            this.performSkip(videoElement, skipInfo.opening.end, '–∑–∞—Å—Ç–∞–≤–∫—É');
                            skipped = true;
                        }
                        // –ï—Å–ª–∏ –∑–∞—Å—Ç–∞–≤–∫–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–∏—Ç—Ä—ã
                        else if (skipInfo.ending && currentTime < skipInfo.ending.end) {
                            this.performSkip(videoElement, skipInfo.ending.end, '—Ç–∏—Ç—Ä—ã');
                            skipped = true;
                        }
                    }

                    if (!skipped) {
                        // –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–º–æ–≥–ª–∏, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞ 90 —Å–µ–∫—É–Ω–¥ –≤–ø–µ—Ä–µ–¥
                        const targetTime = Math.min(videoElement.currentTime + 90, videoElement.duration - 1);
                        this.performSkip(videoElement, targetTime, '–≤–ø–µ—Ä–µ–¥');
                    }
                } else {
                    this.showSkipNotification('error', '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞.');
                }
            };

            videoContainer.appendChild(button);
            this.log('–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–ª–µ–µ—Ä.', 'debug');
        }

        /**
         * –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ —Å –ø–ª–µ–µ—Ä–∞
         */
        removeManualSkipButton() {
            const button = document.getElementById('anilibria-autoskip-button');
            if (button && button.parentNode) {
                button.parentNode.removeChild(button);
                this.log('–ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" —É–¥–∞–ª–µ–Ω–∞ —Å –ø–ª–µ–µ—Ä–∞.', 'debug');
            }
        }

        /**
         * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–Ω–æ–ø–∫–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞
         */
        toggleManualSkipButton(show) {
            const button = document.getElementById('anilibria-autoskip-button');
            if (button) {
                button.style.display = show ? 'flex' : 'none';
            }
        }

        /**
         * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
         */
        performExtendedDiagnostics() {
            this.log('üîç === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê v2.1.1 ===', 'info');
            this.log(`üîç Lampa –¥–æ—Å—Ç—É–ø–Ω–∞: ${typeof Lampa !== 'undefined'}`, 'info');
            this.log(`üîç Lampa.Player –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!(Lampa && Lampa.Player)}`, 'info');
            this.log(`üîç Lampa.Activity –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!(Lampa && Lampa.Activity)}`, 'info');
            this.log(`üîç Lampa.Listener –¥–æ—Å—Ç—É–ø–µ–Ω: ${!!(Lampa && Lampa.Listener)}`, 'info');
            this.log(`üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: ${this.settings.universalMode}`, 'info');

            const currentActivity = this.getCurrentActivityName();
            this.log(`üîç –¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${currentActivity || '–Ω–µ—Ç'}`, 'info');

            const videoElements = document.querySelectorAll('video');
            this.log(`üîç –ù–∞–π–¥–µ–Ω–æ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${videoElements.length}`, 'info');

            const episodeElements = EPISODE_SELECTORS.map(selector =>
                document.querySelectorAll(selector).length
            ).reduce((a, b) => a + b, 0);
            this.log(`üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —ç–ø–∏–∑–æ–¥–æ–≤: ${episodeElements}`, 'info');

            this.log('üîç === –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===', 'info');
        }

        /**
         * –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
         */
        showSkipNotification(type, message, duration = CONFIG.skip.notificationDuration) {
            if (!this.settings.showNotifications) return;

            try {
                if (Lampa.Noty) {
                    Lampa.Noty.show(message, {
                        type: type,
                        timeout: duration
                    });
                } else {
                    console.log(`[AnilibriaAutoSkip] ${message}`);
                }
            } catch (error) {
                console.log(`[AnilibriaAutoSkip] ${message}`);
            }
        }

        /**
         * –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
         */
        log(message, level = 'info') {
            // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–∫–ª—é—á–∞–µ–º debug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ findUniversalEpisodeNumber
            const isEpisodeDebug = message.includes('–≠–ø–∏–∑–æ–¥') || message.includes('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞');
            if (!this.settings.debugEnabled && level === 'debug' && !isEpisodeDebug) return;

            const timestamp = new Date().toLocaleTimeString();
            const icons = {
                debug: 'üîç',
                info: '‚ÑπÔ∏è',
                warning: '‚ö†Ô∏è',
                error: '‚ùå',
                success: '‚úÖ'
            };

            const fullMessage = `[AnilibriaAutoSkip] ${timestamp} ${icons[level] || '‚ÑπÔ∏è'} ${message}`;

            switch(level) {
                case 'error':
                    console.error(fullMessage);
                    break;
                case 'warning':
                    console.warn(fullMessage);
                    break;
                default:
                    console.log(fullMessage);
            }
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    try {
        const plugin = new AnilibriaAutoSkipPlugin();

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞–≥–∏–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        window.AnilibriaAutoSkipPlugin = plugin;

    } catch (error) {
        console.error('[AnilibriaAutoSkip] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }

})();
