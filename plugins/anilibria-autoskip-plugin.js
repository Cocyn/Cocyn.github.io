/**
 * Anilibria Auto-Skip Plugin v1.9.2
 * 
 * –ü–ª–∞–≥–∏–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ –∑–∞—Å—Ç–∞–≤–æ–∫ –∏ —Ç–∏—Ç—Ä–æ–≤ –≤ –∞–Ω–∏–º–µ –æ—Ç Anilibria.
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v1.9.2:
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 * - –£–ª—É—á—à–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * - –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä–∏–∏
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –ø–ª–µ–µ—Ä–∞
 * - –£–ª—É—á—à–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å lampa.mx –∏ –¥—Ä—É–≥–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ Lampa
 * 
 * URL: http://localhost:5000/anilibria-autoskip-plugin.js
 */
(function() {
    'use strict';

    const CONFIG = {
        id: 'anilibria_autoskip',
        name: 'Anilibria Auto-Skip',
        version: '1.9.2', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤ –∏ —É–ª—É—á—à–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        api: {
            endpoints: [
                'https://anilibria.tv/api/v2/',
                'https://api.anilibria.tv/v3/',
                'https://anilibria.top/api/v1/'
            ],
            timeout: 15000,
            retries: 2,
            fallbackData: true
        },
        cache: {
            prefix: 'anilibria_skip_',
            expiry: 24 * 60 * 60 * 1000,
            maxSize: 50
        },
        skip: {
            defaultDelay: 1000,
            notificationDuration: 3000,
            checkInterval: 500
        },
        settings: {
            autoSkipEnabled: true,
            debugEnabled: true,
            skipDelay: 1000,
            cacheEnabled: true,
            showNotifications: true
        }
    };

    if (typeof Lampa === 'undefined') {
        console.warn('[AnilibriaAutoSkip] Lampa API –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    class AnilibriaAutoSkipPlugin {
        constructor() {
            this.settings = {...CONFIG.settings};
            this.cache = new Map();
            this.currentTitle = null;
            this.currentEpisode = null;
            this.currentSeason = null;
            this.skipData = null;
            this.timelineCheckInterval = null;
            this.lastSkipTime = 0;
            this.isInitialized = false;
            this.lastVideoCount = 0;
            this.lastDataRefresh = 0;
            this.lastActivityCheck = null;
            this.isRecheckInProgress = false;
            this.currentPlayer = null;
            this.currentVideoElement = null;
            this.lastContentHash = null;
            this.init();
        }

        init() {
            try {
                this.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞ v1.9.2...', 'info');
                this.loadSettings();
                this.setupLampaIntegration();
                this.setupEventListeners();
                this.startActivityMonitoring();
                this.isInitialized = true;
                this.log('–ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
                this.showSkipNotification('success', 'üéØ Anilibria Auto-Skip v1.9.2 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
                
                this.performDiagnostics();
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
            }
        }

        loadSettings() {
            this.log('–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...', 'info');
            try {
                const stored = Lampa.Storage.get(`${CONFIG.id}_settings`);
                if (stored) this.settings = {...this.settings, ...stored};
                this.log(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${JSON.stringify(this.settings)}`, 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'warning');
            }
        }

        saveSettings() {
            try {
                Lampa.Storage.set(`${CONFIG.id}_settings`, this.settings);
                this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'debug');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`, 'error');
            }
        }

        setupLampaIntegration() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Lampa...', 'info');
            this.log('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Lampa –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
        }

        setupEventListeners() {
            this.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π...', 'info');
            try {
                // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è Lampa
                Lampa.Listener.follow('full', (e) => {
                    if (e.type === 'complite' && e.data?.movie) {
                        const title = this.extractTitle(e.data.movie);
                        if (title) {
                            this.log(`–°–æ–±—ã—Ç–∏–µ full: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                            this.onTitleChange(title);
                        }
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –ø–ª–µ–µ—Ä–∞
                Lampa.Listener.follow('player', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –ø–ª–µ–µ—Ä–∞: ${e.type}`, 'debug');
                    
                    if (e.type === 'start') {
                        this.currentPlayer = e.player || null;
                        this.onPlayerStart();
                    } else if (e.type === 'timeupdate') {
                        this.onTimeUpdate(e.current);
                    } else if (e.type === 'end' || e.type === 'destroy') {
                        this.onPlayerEnd();
                    } else if (e.type === 'video') {
                        // –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
                        this.currentVideoElement = e.video || null;
                        this.log('–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ø–ª–µ–µ—Ä', 'debug');
                        setTimeout(() => this.recheckCurrentContent(), 1000);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                Lampa.Listener.follow('activity', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${e.type}`, 'debug');
                    if (e.type === 'start' && e.object?.movie) {
                        const title = this.extractTitle(e.object.movie);
                        if (title) {
                            this.log(`–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ "${title}"`, 'debug');
                            setTimeout(() => this.onTitleChange(title), 1000);
                        }
                    }
                });

                // –°–æ–±—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
                Lampa.Listener.follow('page', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${e.type}`, 'debug');
                    if (e.type === 'player') {
                        setTimeout(() => this.recheckCurrentContent(), 2000);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                Lampa.Listener.follow('content', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${e.type}`, 'debug');
                    if (e.type === 'change' || e.type === 'start') {
                        const delay = this.webOSMode ? 3000 : 1000;
                        setTimeout(() => this.forceContentRecheck(), delay);
                    }
                });

                // –°–æ–±—ã—Ç–∏—è —Å–µ—Ä–∏–∞–ª–æ–≤ - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –≠–ü–ò–ó–û–î–û–í
                Lampa.Listener.follow('series', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ —Å–µ—Ä–∏–∞–ª–∞: ${e.type}`, 'debug');
                    if (e.type === 'episode' || e.type === 'season') {
                        this.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞/—Å–µ–∑–æ–Ω–∞ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ series', 'info');
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–ø–∏–∑–æ–¥–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è
                        if (e.data) {
                            const episodeNum = this.extractEpisodeFromEvent(e.data);
                            if (episodeNum !== null) {
                                this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è: ${episodeNum}`, 'debug');
                                this.currentEpisode = episodeNum;
                            }
                        }
                        
                        const delay = this.webOSMode ? 5000 : 1500;
                        setTimeout(() => this.forceContentRecheck(), delay);
                    }
                });

                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
                Lampa.Listener.follow('video', (e) => {
                    this.log(`–°–æ–±—ã—Ç–∏–µ –≤–∏–¥–µ–æ: ${e.type}`, 'debug');
                    if (e.type === 'start' || e.type === 'load') {
                        setTimeout(() => this.recheckCurrentContent(), 1000);
                    }
                });

                this.log('–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'success');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª–µ–π: ${error.message}`, 'error');
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
         */
        extractTitle(movie) {
            if (!movie) return null;
            
            return movie.title || 
                   movie.name || 
                   movie.original_title || 
                   movie.original_name ||
                   movie.ru_title ||
                   movie.en_title ||
                   null;
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è
         */
        extractEpisodeFromEvent(eventData) {
            if (!eventData) return null;

            // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞
            const episodeFields = [
                'episode', 'episode_number', 'episodeNumber', 'ep',
                'number', 'index', 'position', 'current_episode'
            ];

            for (const field of episodeFields) {
                if (eventData[field] !== undefined && eventData[field] !== null) {
                    const num = parseInt(eventData[field]);
                    if (!isNaN(num) && num > 0) {
                        return num;
                    }
                }
            }

            return null;
        }

        performDiagnostics() {
            this.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê LAMPA v1.9.2 ===', 'info');
            try {
                this.log(`Lampa –¥–æ—Å—Ç—É–ø–Ω–∞: ${typeof Lampa !== 'undefined'}`, 'debug');
                this.log(`Lampa.Player –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Player !== 'undefined'}`, 'debug');
                this.log(`Lampa.Activity –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Activity !== 'undefined'}`, 'debug');
                this.log(`Lampa.Listener –¥–æ—Å—Ç—É–ø–µ–Ω: ${typeof Lampa?.Listener !== 'undefined'}`, 'debug');
                
                // WebOS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                const isWebOS = navigator.userAgent.includes('webOS') || navigator.userAgent.includes('LG');
                this.log(`WebOS –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${isWebOS}`, 'info');
                
                if (isWebOS) {
                    this.log('WebOS –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞', 'info');
                    this.webOSMode = true;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    this.log(`–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${activity ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'}`, 'debug');
                    if (activity?.movie) {
                        const title = this.extractTitle(activity.movie);
                        this.log(`–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ: ${title || '–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`, 'debug');
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä—ã
                const videos = document.querySelectorAll('video');
                this.log(`–ù–∞–π–¥–µ–Ω–æ video —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${videos.length}`, 'debug');
                videos.forEach((video, index) => {
                    this.log(`Video ${index}: duration=${video.duration}, currentTime=${video.currentTime}`, 'debug');
                });
                
                this.log('=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===', 'info');
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${error.message}`, 'error');
            }
        }

        startActivityMonitoring() {
            this.log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...', 'info');
            
            const monitoringInterval = this.webOSMode ? 4000 : 2000;
            setInterval(() => this.checkCurrentActivity(), monitoringInterval);
            
            this.setupDOMObserver();
        }

        setupDOMObserver() {
            if (typeof MutationObserver === 'undefined') {
                this.log('MutationObserver –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback', 'debug');
                return;
            }
            
            let lastMutationTime = 0;
            const mutationThrottle = 3000;
            
            const observer = new MutationObserver((mutations) => {
                const now = Date.now();
                if (now - lastMutationTime < mutationThrottle) {
                    return;
                }
                
                let hasVideoChanges = false;
                
                mutations.forEach((mutation) => {
                    mutation.addedNodes.forEach((node) => {
                        if (node.nodeType === Node.ELEMENT_NODE) {
                            if (node.tagName === 'VIDEO' || node.querySelector('video')) {
                                hasVideoChanges = true;
                                this.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π video —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ MutationObserver', 'debug');
                            }
                        }
                    });
                });
                
                if (hasVideoChanges) {
                    lastMutationTime = now;
                    this.onVideoDetected();
                }
            });
            
            observer.observe(document.body, {
                childList: true,
                subtree: true,
                attributes: false
            });
            
            this.log(`DOM Observer –Ω–∞—Å—Ç—Ä–æ–µ–Ω${this.webOSMode ? ' –¥–ª—è WebOS (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)' : ''}`, 'debug');
        }

        checkCurrentActivity() {
            try {
                const currentVideoCount = document.querySelectorAll('video').length;
                
                if (currentVideoCount !== this.lastVideoCount) {
                    this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${currentVideoCount}`, 'debug');
                    this.lastVideoCount = currentVideoCount;
                    
                    if (currentVideoCount > 0) {
                        this.log('–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞', 'debug');
                        setTimeout(() => this.forceContentRecheck(), 2000);
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å Lampa
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    if (activity && activity !== this.lastActivityCheck) {
                        this.lastActivityCheck = activity;
                        
                        if (activity.movie) {
                            const title = this.extractTitle(activity.movie);
                            if (title && title !== this.currentTitle) {
                                this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${title}`, 'debug');
                                this.onTitleChange(title);
                            }
                        }
                    }
                }
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: ${error.message}`, 'error');
            }
        }

        onVideoDetected() {
            this.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å video —ç–ª–µ–º–µ–Ω—Ç–æ–º', 'debug');
            setTimeout(() => this.forceContentRecheck(), 4000);
        }

        async onTitleChange(title) {
            try {
                this.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–µ: "${title}"`, 'info');
                this.currentTitle = title;
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ø–∏–∑–æ–¥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–π—Ç–ª–∞
                this.currentEpisode = null;
                this.currentSeason = null;
                
                await this.loadSkipData(title);
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–π—Ç–ª–∞: ${error.message}`, 'error');
            }
        }

        async loadSkipData(title) {
            try {
                this.log('–ó–∞–ø—Ä–æ—Å –∫ API Anilibria...', 'debug');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
                const cacheKey = `${CONFIG.cache.prefix}${title}`;
                if (this.settings.cacheEnabled && this.cache.has(cacheKey)) {
                    const cachedData = this.cache.get(cacheKey);
                    if (Date.now() - cachedData.timestamp < CONFIG.cache.expiry) {
                        this.log('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'debug');
                        this.skipData = cachedData.data;
                        this.showSkipNotification('info', `üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è "${title}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∫—ç—à–∞`);
                        return;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                const builtInData = this.getBuiltInData(title);
                if (builtInData) {
                    this.log('–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 'debug');
                    this.skipData = builtInData;
                    
                    // –ö—ç—à–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (this.settings.cacheEnabled) {
                        this.cache.set(cacheKey, {
                            data: builtInData,
                            timestamp: Date.now()
                        });
                    }
                    
                    this.showSkipNotification('success', `üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è "${title}" –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –±–∞–∑–∞)`);
                    return;
                }
                
                this.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warning');
                this.skipData = null;
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error');
                this.skipData = null;
            }
        }

        /**
         * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ù–û–ú–ï–†–ê –≠–ü–ò–ó–û–î–ê
         */
        extractEpisodeNumber() {
            try {
                // –ú–µ—Ç–æ–¥ 1: –ò–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–µ–µ—Ä–∞
                if (this.currentPlayer && this.currentPlayer.episode) {
                    const episodeNum = parseInt(this.currentPlayer.episode);
                    if (!isNaN(episodeNum) && episodeNum > 0) {
                        this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –ø–ª–µ–µ—Ä–∞: ${episodeNum}`, 'debug');
                        return episodeNum;
                    }
                }

                // –ú–µ—Ç–æ–¥ 2: –ò–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ Lampa
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    if (activity) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                        const episodeFields = [
                            'episode', 'episode_number', 'episodeNumber', 'ep',
                            'current_episode', 'selected_episode'
                        ];
                        
                        for (const field of episodeFields) {
                            if (activity[field] !== undefined) {
                                const episodeNum = parseInt(activity[field]);
                                if (!isNaN(episodeNum) && episodeNum > 0) {
                                    this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (${field}): ${episodeNum}`, 'debug');
                                    return episodeNum;
                                }
                            }
                        }

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                        if (activity.movie) {
                            for (const field of episodeFields) {
                                if (activity.movie[field] !== undefined) {
                                    const episodeNum = parseInt(activity.movie[field]);
                                    if (!isNaN(episodeNum) && episodeNum > 0) {
                                        this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ movie (${field}): ${episodeNum}`, 'debug');
                                        return episodeNum;
                                    }
                                }
                            }
                        }
                    }
                }

                // –ú–µ—Ç–æ–¥ 3: –ò–∑ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const urlEpisode = this.extractEpisodeFromURL();
                if (urlEpisode !== null) {
                    this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ URL: ${urlEpisode}`, 'debug');
                    return urlEpisode;
                }

                // –ú–µ—Ç–æ–¥ 4: –ò–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                const domEpisode = this.extractEpisodeFromDOM();
                if (domEpisode !== null) {
                    this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ DOM: ${domEpisode}`, 'debug');
                    return domEpisode;
                }

                // –ú–µ—Ç–æ–¥ 5: –ò–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const titleEpisode = this.extractEpisodeFromTitle();
                if (titleEpisode !== null) {
                    this.log(`–ù–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${titleEpisode}`, 'debug');
                    return titleEpisode;
                }

                // –ú–µ—Ç–æ–¥ 6: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                if (this.currentEpisode !== null) {
                    this.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞: ${this.currentEpisode}`, 'debug');
                    return this.currentEpisode;
                }

                this.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä —ç–ø–∏–∑–æ–¥–∞', 'warning');
                return null;

            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞: ${error.message}`, 'error');
                return null;
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ URL
         */
        extractEpisodeFromURL() {
            try {
                const url = window.location.href;
                
                // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ URL
                const patterns = [
                    /episode[_-]?(\d+)/i,
                    /ep[_-]?(\d+)/i,
                    /—Å–µ—Ä–∏—è[_-]?(\d+)/i,
                    /[?&]episode=(\d+)/i,
                    /[?&]ep=(\d+)/i,
                    /\/(\d+)\/episode/i,
                    /\/episode\/(\d+)/i
                ];
                
                for (const pattern of patterns) {
                    const match = url.match(pattern);
                    if (match && match[1]) {
                        const episodeNum = parseInt(match[1]);
                        if (!isNaN(episodeNum) && episodeNum > 0) {
                            return episodeNum;
                        }
                    }
                }
                
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –∏–∑ URL: ${error.message}`, 'error');
                return null;
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
         */
        extractEpisodeFromDOM() {
            try {
                // –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞
                const selectors = [
                    '.series__episode.active',
                    '.episode-item.active',
                    '.current-episode',
                    '.selected-episode',
                    '[data-episode]',
                    '.episode-number',
                    '.ep-number'
                ];
                
                for (const selector of selectors) {
                    const elements = document.querySelectorAll(selector);
                    for (const element of elements) {
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã
                        const dataEpisode = element.getAttribute('data-episode');
                        if (dataEpisode) {
                            const episodeNum = parseInt(dataEpisode);
                            if (!isNaN(episodeNum) && episodeNum > 0) {
                                return episodeNum;
                            }
                        }
                        
                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                        const text = element.textContent || element.innerText || '';
                        const episodeMatch = text.match(/(\d+)/);
                        if (episodeMatch) {
                            const episodeNum = parseInt(episodeMatch[1]);
                            if (!isNaN(episodeNum) && episodeNum > 0) {
                                return episodeNum;
                            }
                        }
                    }
                }
                
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –∏–∑ DOM: ${error.message}`, 'error');
                return null;
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
         */
        extractEpisodeFromTitle() {
            try {
                const title = document.title;
                
                const patterns = [
                    /—Å–µ—Ä–∏—è\s*(\d+)/i,
                    /episode\s*(\d+)/i,
                    /ep\.?\s*(\d+)/i,
                    /—ç–ø–∏–∑–æ–¥\s*(\d+)/i,
                    /s\d+e(\d+)/i
                ];
                
                for (const pattern of patterns) {
                    const match = title.match(pattern);
                    if (match && match[1]) {
                        const episodeNum = parseInt(match[1]);
                        if (!isNaN(episodeNum) && episodeNum > 0) {
                            return episodeNum;
                        }
                    }
                }
                
                return null;
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞: ${error.message}`, 'error');
                return null;
            }
        }

        /**
         * –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–ü–†–û–í–ï–†–ö–ò –ö–û–ù–¢–ï–ù–¢–ê
         */
        forceContentRecheck() {
            if (this.isRecheckInProgress) {
                this.log('–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º', 'debug');
                return;
            }

            this.isRecheckInProgress = true;
            
            try {
                this.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∏–¥–µ–æ...', 'debug');
                
                // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                const currentTitle = this.getCurrentTitle();
                const currentEpisode = this.extractEpisodeNumber();
                const currentSeason = this.extractSeasonNumber();
                
                // –°–æ–∑–¥–∞–µ–º —Ö—ç—à —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                const contentHash = `${currentTitle}_s${currentSeason}_e${currentEpisode}`;
                
                this.log(`–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç: "${currentTitle}" s${currentSeason} e${currentEpisode}`, 'debug');
                this.log(`–•—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentHash}`, 'debug');
                this.log(`–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ö—ç—à: ${this.lastContentHash}`, 'debug');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç
                if (this.lastContentHash === contentHash) {
                    this.log('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', 'debug');
                    return;
                }
                
                // –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
                this.log(`–ö–û–ù–¢–ï–ù–¢ –ò–ó–ú–ï–ù–ò–õ–°–Ø! –°—Ç–∞—Ä—ã–π: ${this.lastContentHash} -> –ù–æ–≤—ã–π: ${contentHash}`, 'info');
                this.lastContentHash = contentHash;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                if (currentTitle && currentTitle !== this.currentTitle) {
                    this.log(`–°–º–µ–Ω–∞ —Ç–∞–π—Ç–ª–∞: "${this.currentTitle}" -> "${currentTitle}"`, 'info');
                    this.onTitleChange(currentTitle);
                }
                
                if (currentEpisode !== null && currentEpisode !== this.currentEpisode) {
                    this.log(`–°–º–µ–Ω–∞ —ç–ø–∏–∑–æ–¥–∞: ${this.currentEpisode} -> ${currentEpisode}`, 'info');
                    this.currentEpisode = currentEpisode;
                    
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —ç–ø–∏–∑–æ–¥–∞
                    this.showSkipNotification('info', `üì∫ –≠–ø–∏–∑–æ–¥ ${currentEpisode}`);
                }
                
                if (currentSeason !== null && currentSeason !== this.currentSeason) {
                    this.log(`–°–º–µ–Ω–∞ —Å–µ–∑–æ–Ω–∞: ${this.currentSeason} -> ${currentSeason}`, 'info');
                    this.currentSeason = currentSeason;
                }
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`, 'error');
            } finally {
                // –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                setTimeout(() => {
                    this.isRecheckInProgress = false;
                }, 2000);
            }
        }

        /**
         * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∏–º–µ
         */
        getCurrentTitle() {
            try {
                // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    if (activity?.movie) {
                        const title = this.extractTitle(activity.movie);
                        if (title) return title;
                    }
                }
                
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                return this.currentTitle;
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è: ${error.message}`, 'error');
                return this.currentTitle;
            }
        }

        /**
         * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–∞
         */
        extractSeasonNumber() {
            try {
                // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ extractEpisodeNumber, –Ω–æ –¥–ª—è —Å–µ–∑–æ–Ω–æ–≤
                if (typeof Lampa?.Activity?.active === 'function') {
                    const activity = Lampa.Activity.active();
                    if (activity) {
                        const seasonFields = ['season', 'season_number', 'seasonNumber', 'current_season'];
                        
                        for (const field of seasonFields) {
                            if (activity[field] !== undefined) {
                                const seasonNum = parseInt(activity[field]);
                                if (!isNaN(seasonNum) && seasonNum > 0) {
                                    return seasonNum;
                                }
                            }
                        }
                    }
                }
                
                return this.currentSeason || 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–µ—Ä–≤—ã–π —Å–µ–∑–æ–Ω
                
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Å–µ–∑–æ–Ω–∞: ${error.message}`, 'error');
                return 1;
            }
        }

        recheckCurrentContent() {
            setTimeout(() => this.forceContentRecheck(), 500);
        }

        onPlayerStart() {
            this.log('–ü–ª–µ–µ—Ä –∑–∞–ø—É—â–µ–Ω', 'debug');
            this.startTimelineCheck();
        }

        onPlayerEnd() {
            this.log('–ü–ª–µ–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'debug');
            this.stopTimelineCheck();
        }

        onTimeUpdate(currentTime) {
            if (!this.settings.autoSkipEnabled || !this.skipData || currentTime === undefined) {
                return;
            }

            const episodeNumber = this.extractEpisodeNumber();
            if (episodeNumber === null) {
                return;
            }

            this.checkAndSkip(currentTime, episodeNumber);
        }

        startTimelineCheck() {
            this.stopTimelineCheck();
            
            this.timelineCheckInterval = setInterval(() => {
                try {
                    const video = document.querySelector('video');
                    if (video && !video.paused) {
                        this.onTimeUpdate(video.currentTime);
                    }
                } catch (error) {
                    this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏: ${error.message}`, 'error');
                }
            }, CONFIG.skip.checkInterval);
        }

        stopTimelineCheck() {
            if (this.timelineCheckInterval) {
                clearInterval(this.timelineCheckInterval);
                this.timelineCheckInterval = null;
            }
        }

        checkAndSkip(currentTime, episodeNumber) {
            if (!this.skipData || !this.skipData[episodeNumber]) {
                return;
            }

            const episodeData = this.skipData[episodeNumber];
            const now = Date.now();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç—Ä–æ
            if (episodeData.intro && this.shouldSkip(currentTime, episodeData.intro, now)) {
                this.performSkip(episodeData.intro.end, '–∑–∞—Å—Ç–∞–≤–∫–∏');
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç—Ä–æ
            else if (episodeData.outro && this.shouldSkip(currentTime, episodeData.outro, now)) {
                this.performSkip(episodeData.outro.end, '—Ç–∏—Ç—Ä–æ–≤');
            }
        }

        shouldSkip(currentTime, skipData, now) {
            return currentTime >= skipData.start && 
                   currentTime <= skipData.end &&
                   (now - this.lastSkipTime) > (this.settings.skipDelay * 2);
        }

        performSkip(skipToTime, skipType) {
            try {
                const video = document.querySelector('video');
                if (!video) {
                    this.log('–í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞', 'warning');
                    return;
                }

                video.currentTime = skipToTime;
                this.lastSkipTime = Date.now();
                
                const message = `‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ ${skipType}`;
                this.log(message, 'info');
                this.showSkipNotification('success', message);

            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞: ${error.message}`, 'error');
            }
        }

        /**
         * –í–°–¢–†–û–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –° –í–†–ï–ú–ï–ù–ù–´–ú–ò –ú–ï–¢–ö–ê–ú–ò
         */
        getBuiltInData(title) {
            const database = {
                "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≥–µ—Ä–æ—è —â–∏—Ç–∞": {
                    1: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    2: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    3: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    4: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    5: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } }
                },
                "–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤": {
                    1: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } },
                    2: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } },
                    3: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } }
                },
                "–ö–ª–∏–Ω–æ–∫, —Ä–∞—Å—Å–µ–∫–∞—é—â–∏–π –¥–µ–º–æ–Ω–æ–≤": {
                    1: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    2: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    3: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } }
                },
                "–ú–æ—è –≥–µ—Ä–æ–π—Å–∫–∞—è –∞–∫–∞–¥–µ–º–∏—è": {
                    1: { intro: { start: 0, end: 90 }, outro: { start: 1300, end: 1420 } },
                    2: { intro: { start: 0, end: 90 }, outro: { start: 1300, end: 1420 } },
                    3: { intro: { start: 0, end: 90 }, outro: { start: 1300, end: 1420 } }
                },
                "–ù–∞—Ä—É—Ç–æ": {
                    1: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    2: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } },
                    3: { intro: { start: 0, end: 90 }, outro: { start: 1320, end: 1440 } }
                },
                "–¢–æ–∫–∏–π—Å–∫–∏–π –≥—É–ª—å": {
                    1: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } },
                    2: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } },
                    3: { intro: { start: 0, end: 85 }, outro: { start: 1300, end: 1420 } }
                }
            };

            // –ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            if (database[title]) {
                return database[title];
            }

            // –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            for (const [dbTitle, data] of Object.entries(database)) {
                if (title.includes(dbTitle) || dbTitle.includes(title)) {
                    this.log(`–ù–∞–π–¥–µ–Ω–æ —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${title}" -> "${dbTitle}"`, 'debug');
                    return data;
                }
            }

            return null;
        }

        showSkipNotification(type, message) {
            if (!this.settings.showNotifications) return;

            try {
                if (typeof Lampa?.Noty === 'function') {
                    Lampa.Noty.show(message);
                } else if (typeof Lampa?.Toast === 'function') {
                    Lampa.Toast.show(message);
                } else {
                    this.log(message, type);
                }
            } catch (error) {
                this.log(`–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${error.message}`, 'error');
                this.log(message, type);
            }
        }

        log(message, level = 'info') {
            if (!this.settings.debugEnabled && level === 'debug') return;

            const timestamp = new Date().toLocaleTimeString();
            const prefix = `[AnilibriaAutoSkip] ${timestamp}`;
            
            switch (level) {
                case 'error':
                    console.error(`${prefix} ‚ùå ${message}`);
                    break;
                case 'warning':
                    console.warn(`${prefix} ‚ö†Ô∏è ${message}`);
                    break;
                case 'success':
                    console.log(`${prefix} ‚úÖ ${message}`);
                    break;
                case 'debug':
                    console.log(`${prefix} üîç ${message}`);
                    break;
                default:
                    console.log(`${prefix} ${message}`);
            }
        }

        destroy() {
            this.log('–£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞...', 'info');
            this.stopTimelineCheck();
            this.cache.clear();
            this.isInitialized = false;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
    if (typeof window !== 'undefined') {
        window.AnilibriaAutoSkipPlugin = new AnilibriaAutoSkipPlugin();
    }

})();
